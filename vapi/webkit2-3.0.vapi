/* webkit2-3.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "WebKit", gir_namespace = "WebKit2", gir_version = "3.0", lower_case_cprefix = "webkit_")]
namespace WebKit {
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_authentication_request_get_type ()")]
	public class AuthenticationRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		protected AuthenticationRequest ();
		public void authenticate (WebKit.Credential? credential);
		public bool can_save_credentials ();
		public void cancel ();
		public unowned string get_host ();
		public uint get_port ();
		public WebKit.Credential get_proposed_credential ();
		public unowned string get_realm ();
		public WebKit.AuthenticationScheme get_scheme ();
		public bool is_for_proxy ();
		public bool is_retry ();
		public signal void cancelled ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_back_forward_list_get_type ()")]
	public class BackForwardList : GLib.Object {
		[CCode (has_construct_function = false)]
		protected BackForwardList ();
		public unowned WebKit.BackForwardListItem get_back_item ();
		public GLib.List<weak WebKit.BackForwardListItem> get_back_list ();
		public GLib.List<weak WebKit.BackForwardListItem> get_back_list_with_limit (uint limit);
		public unowned WebKit.BackForwardListItem get_current_item ();
		public unowned WebKit.BackForwardListItem get_forward_item ();
		public GLib.List<weak WebKit.BackForwardListItem> get_forward_list ();
		public GLib.List<weak WebKit.BackForwardListItem> get_forward_list_with_limit (uint limit);
		public uint get_length ();
		public unowned WebKit.BackForwardListItem get_nth_item (int index);
		public signal void changed (WebKit.BackForwardListItem? item_added, void* items_removed);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_back_forward_list_item_get_type ()")]
	public class BackForwardListItem : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		protected BackForwardListItem ();
		public unowned string get_original_uri ();
		public unowned string get_title ();
		public unowned string get_uri ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "webkit_certificate_info_get_type ()")]
	[Compact]
	public class CertificateInfo {
		public WebKit.CertificateInfo copy ();
		public void free ();
		public unowned GLib.TlsCertificate get_tls_certificate ();
		public GLib.TlsCertificateFlags get_tls_errors ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_context_menu_get_type ()")]
	public class ContextMenu : GLib.Object {
		[CCode (has_construct_function = false)]
		public ContextMenu ();
		public void append (WebKit.ContextMenuItem item);
		public unowned WebKit.ContextMenuItem first ();
		public unowned WebKit.ContextMenuItem get_item_at_position (uint position);
		public unowned GLib.List<WebKit.ContextMenuItem> get_items ();
		public uint get_n_items ();
		public void insert (WebKit.ContextMenuItem item, int position);
		public unowned WebKit.ContextMenuItem last ();
		public void move_item (WebKit.ContextMenuItem item, int position);
		public void prepend (WebKit.ContextMenuItem item);
		public void remove (WebKit.ContextMenuItem item);
		public void remove_all ();
		[CCode (has_construct_function = false)]
		public ContextMenu.with_items (GLib.List<WebKit.ContextMenuItem> items);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_context_menu_item_get_type ()")]
	public class ContextMenuItem : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		public ContextMenuItem (Gtk.Action action);
		[CCode (has_construct_function = false)]
		public ContextMenuItem.from_stock_action (WebKit.ContextMenuAction action);
		[CCode (has_construct_function = false)]
		public ContextMenuItem.from_stock_action_with_label (WebKit.ContextMenuAction action, string label);
		public unowned Gtk.Action get_action ();
		public WebKit.ContextMenuAction get_stock_action ();
		public unowned WebKit.ContextMenu get_submenu ();
		public bool is_separator ();
		[CCode (has_construct_function = false)]
		public ContextMenuItem.separator ();
		public void set_submenu (WebKit.ContextMenu? submenu);
		[CCode (has_construct_function = false)]
		public ContextMenuItem.with_submenu (string label, WebKit.ContextMenu submenu);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_cookie_manager_get_type ()")]
	public class CookieManager : GLib.Object {
		[CCode (has_construct_function = false)]
		protected CookieManager ();
		public void delete_all_cookies ();
		public void delete_cookies_for_domain (string domain);
		public async WebKit.CookieAcceptPolicy get_accept_policy (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		public async string[] get_domains_with_cookies (GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_accept_policy (WebKit.CookieAcceptPolicy policy);
		public void set_persistent_storage (string filename, WebKit.CookiePersistentStorage storage);
		public signal void changed ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "webkit_credential_get_type ()")]
	[Compact]
	public class Credential {
		[CCode (has_construct_function = false)]
		public Credential (string username, string password, WebKit.CredentialPersistence persistence);
		public WebKit.Credential copy ();
		public void free ();
		public unowned string get_password ();
		public WebKit.CredentialPersistence get_persistence ();
		public unowned string get_username ();
		public bool has_password ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_attr_get_type ()")]
	public class DOMAttr : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMAttr ();
		public bool get_is_id ();
		public string get_name ();
		public unowned WebKit.DOMElement get_owner_element ();
		public bool get_specified ();
		public string get_value ();
		public void set_value (string value) throws GLib.Error;
		public bool is_id { get; }
		public string name { owned get; }
		public WebKit.DOMElement owner_element { get; }
		public bool specified { get; }
		public string value { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_audio_track_get_type ()")]
	public class DOMAudioTrack : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMAudioTrack ();
		public bool get_enabled ();
		public string get_id ();
		public string get_kind ();
		public string get_label ();
		public string get_language ();
		public void set_enabled (bool value);
		public bool enabled { get; set; }
		public string id { owned get; }
		public string label { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_audio_track_list_get_type ()")]
	public class DOMAudioTrackList : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMAudioTrackList ();
		public ulong get_length ();
		public unowned WebKit.DOMAudioTrack get_track_by_id (string id);
		public unowned WebKit.DOMAudioTrack item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_bar_info_get_type ()")]
	public class DOMBarInfo : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMBarInfo ();
		public static bool get_visible (void* self);
		[NoAccessorMethod]
		public bool visible { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_bar_prop_get_type ()")]
	public class DOMBarProp : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMBarProp ();
		public bool get_visible ();
		public bool visible { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_battery_manager_get_type ()")]
	public class DOMBatteryManager : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMBatteryManager ();
		public bool get_charging ();
		public double get_charging_time ();
		public double get_discharging_time ();
		public double get_level ();
		public bool charging { get; }
		public double charging_time { get; }
		public double discharging_time { get; }
		public double level { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_blob_get_type ()")]
	public class DOMBlob : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMBlob ();
		public uint64 get_size ();
		public unowned WebKit.DOMBlob slice (int64 start, int64 end, string contentType);
		public unowned WebKit.DOMBlob webkit_slice (int64 start, int64 end, string content_type);
		public uint64 size { get; }
		[NoAccessorMethod]
		public string type { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_cdata_section", type_id = "webkit_dom_cdata_section_get_type ()")]
	public class DOMCDATASection : WebKit.DOMText, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMCDATASection ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_css_rule", type_id = "webkit_dom_css_rule_get_type ()")]
	public class DOMCSSRule : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMCSSRule ();
		public string get_css_text ();
		public unowned WebKit.DOMCSSRule get_parent_rule ();
		public unowned WebKit.DOMCSSStyleSheet get_parent_style_sheet ();
		public void set_css_text (string value) throws GLib.Error;
		public string css_text { owned get; set; }
		public WebKit.DOMCSSRule parent_rule { get; }
		public WebKit.DOMCSSStyleSheet parent_style_sheet { get; }
		[NoAccessorMethod]
		public uint type { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_css_rule_list", type_id = "webkit_dom_css_rule_list_get_type ()")]
	public class DOMCSSRuleList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMCSSRuleList ();
		public ulong get_length ();
		public unowned WebKit.DOMCSSRule item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_css_style_declaration", type_id = "webkit_dom_css_style_declaration_get_type ()")]
	public class DOMCSSStyleDeclaration : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMCSSStyleDeclaration ();
		public string get_css_text ();
		public ulong get_length ();
		public unowned WebKit.DOMCSSRule get_parent_rule ();
		public unowned WebKit.DOMCSSValue get_property_css_value (string propertyName);
		public string get_property_priority (string propertyName);
		public string get_property_shorthand (string propertyName);
		public string get_property_value (string propertyName);
		public bool is_property_implicit (string propertyName);
		public string item (ulong index);
		public string remove_property (string propertyName) throws GLib.Error;
		public void set_css_text (string value) throws GLib.Error;
		public void set_property (string propertyName, string value, string priority) throws GLib.Error;
		public string css_text { owned get; set; }
		public ulong length { get; }
		public WebKit.DOMCSSRule parent_rule { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_css_style_sheet", type_id = "webkit_dom_css_style_sheet_get_type ()")]
	public class DOMCSSStyleSheet : WebKit.DOMStyleSheet {
		[CCode (has_construct_function = false)]
		protected DOMCSSStyleSheet ();
		public long add_rule (string selector, string style, ulong index) throws GLib.Error;
		public void delete_rule (ulong index) throws GLib.Error;
		public unowned WebKit.DOMCSSRuleList get_css_rules ();
		public unowned WebKit.DOMCSSRule get_owner_rule ();
		public unowned WebKit.DOMCSSRuleList get_rules ();
		public ulong insert_rule (string rule, ulong index) throws GLib.Error;
		public void remove_rule (ulong index) throws GLib.Error;
		public WebKit.DOMCSSRuleList css_rules { get; }
		public WebKit.DOMCSSRule owner_rule { get; }
		public WebKit.DOMCSSRuleList rules { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_css_value", type_id = "webkit_dom_css_value_get_type ()")]
	public class DOMCSSValue : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMCSSValue ();
		public string get_css_text ();
		public ushort get_css_value_type ();
		public void set_css_text (string value) throws GLib.Error;
		public string css_text { owned get; set; }
		public uint css_value_type { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_character_data_get_type ()")]
	public class DOMCharacterData : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMCharacterData ();
		public void append_data (string data) throws GLib.Error;
		public void delete_data (ulong offset, ulong length) throws GLib.Error;
		public string get_data ();
		public ulong get_length ();
		public void insert_data (ulong offset, string data) throws GLib.Error;
		public void remove () throws GLib.Error;
		public void replace_data (ulong offset, ulong length, string data) throws GLib.Error;
		public void set_data (string value) throws GLib.Error;
		public string substring_data (ulong offset, ulong length) throws GLib.Error;
		public string data { owned get; set; }
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_comment_get_type ()")]
	public class DOMComment : WebKit.DOMCharacterData, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMComment ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_console_get_type ()")]
	public class DOMConsole : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMConsole ();
		public void* get_memory ();
		public void group_end ();
		public void time (string title);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h")]
	[Compact]
	public class DOMCustom {
	}
	[CCode (cheader_filename = "webkit2/webkit2.h")]
	[Compact]
	public class DOMCustomClass {
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_application_cache", type_id = "webkit_dom_dom_application_cache_get_type ()")]
	public class DOMDOMApplicationCache : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMDOMApplicationCache ();
		public void abort ();
		public ushort get_status ();
		public void swap_cache () throws GLib.Error;
		public void update () throws GLib.Error;
		public uint status { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_implementation", type_id = "webkit_dom_dom_implementation_get_type ()")]
	public class DOMDOMImplementation : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMImplementation ();
		public unowned WebKit.DOMCSSStyleSheet create_css_style_sheet (string title, string media) throws GLib.Error;
		public unowned WebKit.DOMDocument create_document (string namespaceURI, string qualifiedName, WebKit.DOMDocumentType doctype) throws GLib.Error;
		public unowned WebKit.DOMDocumentType create_document_type (string qualifiedName, string publicId, string systemId) throws GLib.Error;
		public unowned WebKit.DOMHTMLDocument create_html_document (string title);
		public bool has_feature (string feature, string version);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_mime_type", type_id = "webkit_dom_dom_mime_type_get_type ()")]
	public class DOMDOMMimeType : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMMimeType ();
		public string get_description ();
		public unowned WebKit.DOMDOMPlugin get_enabled_plugin ();
		public string get_suffixes ();
		public string description { owned get; }
		public WebKit.DOMDOMPlugin enabled_plugin { get; }
		public string suffixes { owned get; }
		[NoAccessorMethod]
		public string type { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_mime_type_array", type_id = "webkit_dom_dom_mime_type_array_get_type ()")]
	public class DOMDOMMimeTypeArray : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMMimeTypeArray ();
		public ulong get_length ();
		public unowned WebKit.DOMDOMMimeType item (ulong index);
		public unowned WebKit.DOMDOMMimeType named_item (string name);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_named_flow_collection", type_id = "webkit_dom_dom_named_flow_collection_get_type ()")]
	public class DOMDOMNamedFlowCollection : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMNamedFlowCollection ();
		public ulong get_length ();
		public unowned WebKit.DOMWebKitNamedFlow item (ulong index);
		public unowned WebKit.DOMWebKitNamedFlow named_item (string name);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_plugin", type_id = "webkit_dom_dom_plugin_get_type ()")]
	public class DOMDOMPlugin : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMPlugin ();
		public string get_description ();
		public string get_filename ();
		public ulong get_length ();
		public string get_name ();
		public unowned WebKit.DOMDOMMimeType item (ulong index);
		public unowned WebKit.DOMDOMMimeType named_item (string name);
		public string description { owned get; }
		public string filename { owned get; }
		public ulong length { get; }
		public string name { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_plugin_array", type_id = "webkit_dom_dom_plugin_array_get_type ()")]
	public class DOMDOMPluginArray : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMPluginArray ();
		public ulong get_length ();
		public unowned WebKit.DOMDOMPlugin item (ulong index);
		public unowned WebKit.DOMDOMPlugin named_item (string name);
		public void refresh (bool reload);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_security_policy", type_id = "webkit_dom_dom_security_policy_get_type ()")]
	public class DOMDOMSecurityPolicy : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMSecurityPolicy ();
		public bool allows_connection_to (string url);
		public bool allows_font_from (string url);
		public bool allows_form_action (string url);
		public bool allows_frame_from (string url);
		public bool allows_image_from (string url);
		public bool allows_media_from (string url);
		public bool allows_object_from (string url);
		public bool allows_plugin_type (string type);
		public bool allows_script_from (string url);
		public bool allows_style_from (string url);
		public bool get_allows_eval ();
		public bool get_allows_inline_script ();
		public bool get_allows_inline_style ();
		public bool get_is_active ();
		public unowned WebKit.DOMDOMStringList get_report_ur_is ();
		public bool allows_eval { get; }
		public bool allows_inline_script { get; }
		public bool allows_inline_style { get; }
		public bool is_active { get; }
		public WebKit.DOMDOMStringList report_ur_is { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_selection", type_id = "webkit_dom_dom_selection_get_type ()")]
	public class DOMDOMSelection : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMSelection ();
		public void add_range (WebKit.DOMRange range);
		public void collapse (WebKit.DOMNode node, long index) throws GLib.Error;
		public void collapse_to_end () throws GLib.Error;
		public void collapse_to_start () throws GLib.Error;
		public bool contains_node (WebKit.DOMNode node, bool allowPartial);
		public void delete_from_document ();
		public void empty ();
		public void extend (WebKit.DOMNode node, long offset) throws GLib.Error;
		public unowned WebKit.DOMNode get_anchor_node ();
		public long get_anchor_offset ();
		public unowned WebKit.DOMNode get_base_node ();
		public long get_base_offset ();
		public unowned WebKit.DOMNode get_extent_node ();
		public long get_extent_offset ();
		public unowned WebKit.DOMNode get_focus_node ();
		public long get_focus_offset ();
		public bool get_is_collapsed ();
		public unowned WebKit.DOMRange get_range_at (long index) throws GLib.Error;
		public long get_range_count ();
		public void modify (string alter, string direction, string granularity);
		public void remove_all_ranges ();
		public void select_all_children (WebKit.DOMNode node) throws GLib.Error;
		public void set_base_and_extent (WebKit.DOMNode baseNode, long baseOffset, WebKit.DOMNode extentNode, long extentOffset) throws GLib.Error;
		public void set_position (WebKit.DOMNode node, long offset) throws GLib.Error;
		public WebKit.DOMNode anchor_node { get; }
		public long anchor_offset { get; }
		public WebKit.DOMNode base_node { get; }
		public long base_offset { get; }
		public WebKit.DOMNode extent_node { get; }
		public long extent_offset { get; }
		public WebKit.DOMNode focus_node { get; }
		public long focus_offset { get; }
		public bool is_collapsed { get; }
		public long range_count { get; }
		[NoAccessorMethod]
		public string type { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_settable_token_list", type_id = "webkit_dom_dom_settable_token_list_get_type ()")]
	public class DOMDOMSettableTokenList : WebKit.DOMDOMTokenList {
		[CCode (has_construct_function = false)]
		protected DOMDOMSettableTokenList ();
		public string get_value ();
		public void set_value (string value);
		public string value { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_string_list", type_id = "webkit_dom_dom_string_list_get_type ()")]
	public class DOMDOMStringList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMStringList ();
		public bool contains (string string);
		public ulong get_length ();
		public string item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_string_map", type_id = "webkit_dom_dom_string_map_get_type ()")]
	public class DOMDOMStringMap : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMStringMap ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_token_list", type_id = "webkit_dom_dom_token_list_get_type ()")]
	public class DOMDOMTokenList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMTokenList ();
		public void add (string tokens) throws GLib.Error;
		public bool contains (string token) throws GLib.Error;
		public ulong get_length ();
		public string item (ulong index);
		public void remove (string tokens) throws GLib.Error;
		public bool toggle (string token, bool force) throws GLib.Error;
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_window", type_id = "webkit_dom_dom_window_get_type ()")]
	public class DOMDOMWindow : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMDOMWindow ();
		public void alert (string message);
		public string atob (string string) throws GLib.Error;
		public void blur ();
		public string btoa (string string) throws GLib.Error;
		public void cancel_animation_frame (long id);
		public void capture_events ();
		public void clear_interval (long handle);
		public void clear_timeout (long handle);
		public void close ();
		public bool confirm (string message);
		public bool find (string string, bool caseSensitive, bool backwards, bool wrap, bool wholeWord, bool searchInFrames, bool showDialog);
		public void focus ();
		public unowned WebKit.DOMDOMApplicationCache get_application_cache ();
		public unowned WebKit.DOMNavigator get_client_information ();
		public bool get_closed ();
		public unowned WebKit.DOMCSSStyleDeclaration get_computed_style (WebKit.DOMElement element, string? pseudoElement);
		public unowned WebKit.DOMConsole get_console ();
		public unowned WebKit.DOMDOMWindowCSS get_css ();
		public string get_default_status ();
		public double get_device_pixel_ratio ();
		public unowned WebKit.DOMDocument get_document ();
		public unowned WebKit.DOMElement get_frame_element ();
		public unowned WebKit.DOMDOMWindow get_frames ();
		public unowned WebKit.DOMHistory get_history ();
		public long get_inner_height ();
		public long get_inner_width ();
		public ulong get_length ();
		public unowned WebKit.DOMStorage get_local_storage () throws GLib.Error;
		public unowned WebKit.DOMBarProp get_locationbar ();
		public unowned WebKit.DOMBarProp get_menubar ();
		public string get_name ();
		public unowned WebKit.DOMNavigator get_navigator ();
		public bool get_offscreen_buffering ();
		public unowned WebKit.DOMDOMWindow get_opener ();
		public long get_outer_height ();
		public long get_outer_width ();
		public long get_page_x_offset ();
		public long get_page_y_offset ();
		public unowned WebKit.DOMDOMWindow get_parent ();
		public unowned WebKit.DOMPerformance get_performance ();
		public unowned WebKit.DOMBarProp get_personalbar ();
		public unowned WebKit.DOMScreen get_screen ();
		public long get_screen_left ();
		public long get_screen_top ();
		public long get_screen_x ();
		public long get_screen_y ();
		public long get_scroll_x ();
		public long get_scroll_y ();
		public unowned WebKit.DOMBarProp get_scrollbars ();
		public unowned WebKit.DOMDOMSelection get_selection ();
		public unowned WebKit.DOMDOMWindow get_self ();
		public unowned WebKit.DOMStorage get_session_storage () throws GLib.Error;
		public string get_status ();
		public unowned WebKit.DOMBarProp get_statusbar ();
		public unowned WebKit.DOMStyleMedia get_style_media ();
		public unowned WebKit.DOMBarProp get_toolbar ();
		public unowned WebKit.DOMDOMWindow get_top ();
		public unowned WebKit.DOMStorageInfo get_webkit_storage_info ();
		public unowned WebKit.DOMDOMWindow get_window ();
		public unowned WebKit.DOMMediaQueryList match_media (string query);
		public void move_by (float x, float y);
		public void move_to (float x, float y);
		public void print ();
		public string prompt (string message, string defaultValue);
		public void release_events ();
		public void resize_by (float x, float y);
		public void resize_to (float width, float height);
		public void scroll (long x, long y);
		public void scroll_by (long x, long y);
		public void scroll_to (long x, long y);
		public void set_default_status (string value);
		public void set_name (string value);
		public void set_status (string value);
		public void stop ();
		public void webkit_cancel_animation_frame (long id);
		public void webkit_cancel_request_animation_frame (long id);
		public unowned WebKit.DOMWebKitPoint webkit_convert_point_from_node_to_page (WebKit.DOMNode node, WebKit.DOMWebKitPoint p);
		public unowned WebKit.DOMWebKitPoint webkit_convert_point_from_page_to_node (WebKit.DOMNode node, WebKit.DOMWebKitPoint p);
		public WebKit.DOMDOMApplicationCache application_cache { get; }
		public WebKit.DOMNavigator client_information { get; }
		public bool closed { get; }
		public WebKit.DOMConsole console { get; }
		public WebKit.DOMDOMWindowCSS css { get; }
		public string default_status { owned get; set; }
		public double device_pixel_ratio { get; }
		public WebKit.DOMDocument document { get; }
		public WebKit.DOMElement frame_element { get; }
		public WebKit.DOMDOMWindow frames { get; }
		public WebKit.DOMHistory history { get; }
		public long inner_height { get; }
		public long inner_width { get; }
		public ulong length { get; }
		public WebKit.DOMStorage local_storage { get; }
		public WebKit.DOMBarProp locationbar { get; }
		public WebKit.DOMBarProp menubar { get; }
		public string name { owned get; set; }
		public WebKit.DOMNavigator navigator { get; }
		public bool offscreen_buffering { get; }
		public WebKit.DOMDOMWindow opener { get; }
		public long outer_height { get; }
		public long outer_width { get; }
		public long page_x_offset { get; }
		public long page_y_offset { get; }
		public WebKit.DOMDOMWindow parent { get; }
		public WebKit.DOMPerformance performance { get; }
		public WebKit.DOMBarProp personalbar { get; }
		public WebKit.DOMScreen screen { get; }
		public long screen_left { get; }
		public long screen_top { get; }
		public long screen_x { get; }
		public long screen_y { get; }
		public long scroll_x { get; }
		public long scroll_y { get; }
		public WebKit.DOMBarProp scrollbars { get; }
		public WebKit.DOMDOMWindow self { get; }
		public WebKit.DOMStorage session_storage { get; }
		public string status { owned get; set; }
		public WebKit.DOMBarProp statusbar { get; }
		public WebKit.DOMStyleMedia style_media { get; }
		public WebKit.DOMBarProp toolbar { get; }
		public WebKit.DOMDOMWindow top { get; }
		public WebKit.DOMStorageInfo webkit_storage_info { get; }
		public WebKit.DOMDOMWindow window { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_dom_window_css", type_id = "webkit_dom_dom_window_css_get_type ()")]
	public class DOMDOMWindowCSS : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMWindowCSS ();
		public bool supports (string property, string value);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_database_get_type ()")]
	public class DOMDatabase : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDatabase ();
		public string get_version ();
		public string version { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_document_get_type ()")]
	public class DOMDocument : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMDocument ();
		public unowned WebKit.DOMNode adopt_node (WebKit.DOMNode source) throws GLib.Error;
		public unowned WebKit.DOMRange caret_range_from_point (long x, long y);
		public unowned WebKit.DOMAttr create_attribute (string name) throws GLib.Error;
		public unowned WebKit.DOMAttr create_attribute_ns (string namespaceURI, string qualifiedName) throws GLib.Error;
		public unowned WebKit.DOMCDATASection create_cdata_section (string data) throws GLib.Error;
		public unowned WebKit.DOMComment create_comment (string data);
		public unowned WebKit.DOMCSSStyleDeclaration create_css_style_declaration ();
		public unowned WebKit.DOMDocumentFragment create_document_fragment ();
		public unowned WebKit.DOMElement create_element (string tagName) throws GLib.Error;
		public unowned WebKit.DOMElement create_element_ns (string namespaceURI, string qualifiedName) throws GLib.Error;
		public unowned WebKit.DOMEntityReference create_entity_reference (string name) throws GLib.Error;
		public unowned WebKit.DOMEvent create_event (string eventType) throws GLib.Error;
		public unowned WebKit.DOMXPathExpression create_expression (string expression, WebKit.DOMXPathNSResolver resolver) throws GLib.Error;
		public unowned WebKit.DOMNodeIterator create_node_iterator (WebKit.DOMNode root, ulong whatToShow, WebKit.DOMNodeFilter filter, bool expandEntityReferences) throws GLib.Error;
		public unowned WebKit.DOMXPathNSResolver create_ns_resolver (WebKit.DOMNode nodeResolver);
		public unowned WebKit.DOMProcessingInstruction create_processing_instruction (string target, string data) throws GLib.Error;
		public unowned WebKit.DOMRange create_range ();
		public unowned WebKit.DOMText create_text_node (string data);
		public unowned WebKit.DOMTreeWalker create_tree_walker (WebKit.DOMNode root, ulong whatToShow, WebKit.DOMNodeFilter filter, bool expandEntityReferences) throws GLib.Error;
		public unowned WebKit.DOMElement element_from_point (long x, long y);
		public unowned WebKit.DOMXPathResult evaluate (string expression, WebKit.DOMNode contextNode, WebKit.DOMXPathNSResolver? resolver, ushort type, WebKit.DOMXPathResult? inResult) throws GLib.Error;
		public bool exec_command (string command, bool userInterface, string value);
		public unowned WebKit.DOMHTMLCollection get_anchors ();
		public unowned WebKit.DOMHTMLCollection get_applets ();
		public unowned WebKit.DOMHTMLElement get_body ();
		public string get_character_set ();
		public string get_charset ();
		public string get_compat_mode ();
		public string get_cookie () throws GLib.Error;
		public unowned WebKit.DOMHTMLScriptElement get_current_script ();
		public string get_default_charset ();
		public unowned WebKit.DOMDOMWindow get_default_view ();
		public unowned WebKit.DOMDocumentType get_doctype ();
		public unowned WebKit.DOMElement get_document_element ();
		public string get_document_uri ();
		public string get_domain ();
		public unowned WebKit.DOMElement get_element_by_id (string elementId);
		public unowned WebKit.DOMNodeList get_elements_by_class_name (string tagname);
		public unowned WebKit.DOMNodeList get_elements_by_name (string elementName);
		public unowned WebKit.DOMNodeList get_elements_by_tag_name (string tagname);
		public unowned WebKit.DOMNodeList get_elements_by_tag_name_ns (string namespaceURI, string localName);
		public unowned WebKit.DOMHTMLCollection get_forms ();
		public unowned WebKit.DOMHTMLHeadElement get_head ();
		public bool get_hidden ();
		public unowned WebKit.DOMHTMLCollection get_images ();
		public unowned WebKit.DOMDOMImplementation get_implementation ();
		public string get_input_encoding ();
		public string get_last_modified ();
		public unowned WebKit.DOMHTMLCollection get_links ();
		public unowned WebKit.DOMCSSStyleDeclaration get_override_style (WebKit.DOMElement element, string pseudoElement);
		public string get_preferred_stylesheet_set ();
		public string get_ready_state ();
		public string get_referrer ();
		public unowned WebKit.DOMDOMSecurityPolicy get_security_policy ();
		public string get_selected_stylesheet_set ();
		public unowned WebKit.DOMStyleSheetList get_style_sheets ();
		public string get_title ();
		public string get_visibility_state ();
		public unowned WebKit.DOMElement get_webkit_current_full_screen_element ();
		public bool get_webkit_full_screen_keyboard_input_allowed ();
		public unowned WebKit.DOMElement get_webkit_fullscreen_element ();
		public bool get_webkit_fullscreen_enabled ();
		public bool get_webkit_hidden ();
		public bool get_webkit_is_full_screen ();
		public unowned WebKit.DOMElement get_webkit_pointer_lock_element ();
		public string get_webkit_visibility_state ();
		public string get_xml_encoding ();
		public bool get_xml_standalone ();
		public string get_xml_version ();
		public unowned WebKit.DOMNode import_node (WebKit.DOMNode importedNode, bool deep) throws GLib.Error;
		public bool query_command_enabled (string command);
		public bool query_command_indeterm (string command);
		public bool query_command_state (string command);
		public bool query_command_supported (string command);
		public string query_command_value (string command);
		public unowned WebKit.DOMElement query_selector (string selectors) throws GLib.Error;
		public unowned WebKit.DOMNodeList query_selector_all (string selectors) throws GLib.Error;
		public void set_body (WebKit.DOMHTMLElement value) throws GLib.Error;
		public void set_charset (string value);
		public void set_cookie (string value) throws GLib.Error;
		public void set_document_uri (string value);
		public void set_selected_stylesheet_set (string value);
		public void set_title (string value);
		public void set_xml_standalone (bool value) throws GLib.Error;
		public void set_xml_version (string value) throws GLib.Error;
		public void webkit_cancel_full_screen ();
		public void webkit_exit_fullscreen ();
		public void webkit_exit_pointer_lock ();
		public unowned WebKit.DOMDOMNamedFlowCollection webkit_get_named_flows ();
		public WebKit.DOMHTMLCollection anchors { get; }
		public WebKit.DOMHTMLCollection applets { get; }
		public WebKit.DOMHTMLElement body { get; set; }
		public string character_set { owned get; }
		public string charset { owned get; set; }
		public string compat_mode { owned get; }
		public string cookie { owned get; set; }
		public WebKit.DOMHTMLScriptElement current_script { get; }
		public string default_charset { owned get; }
		public WebKit.DOMDOMWindow default_view { get; }
		public WebKit.DOMDocumentType doctype { get; }
		public WebKit.DOMElement document_element { get; }
		public string document_uri { owned get; set; }
		public string domain { owned get; }
		public WebKit.DOMHTMLCollection forms { get; }
		public WebKit.DOMHTMLHeadElement head { get; }
		public bool hidden { get; }
		public WebKit.DOMHTMLCollection images { get; }
		public WebKit.DOMDOMImplementation implementation { get; }
		public string input_encoding { owned get; }
		public string last_modified { owned get; }
		public WebKit.DOMHTMLCollection links { get; }
		public string preferred_stylesheet_set { owned get; }
		public string ready_state { owned get; }
		public string referrer { owned get; }
		public WebKit.DOMDOMSecurityPolicy security_policy { get; }
		public string selected_stylesheet_set { owned get; set; }
		public WebKit.DOMStyleSheetList style_sheets { get; }
		public string title { owned get; set; }
		[NoAccessorMethod]
		public string url { owned get; }
		public string visibility_state { owned get; }
		public WebKit.DOMElement webkit_current_full_screen_element { get; }
		public bool webkit_full_screen_keyboard_input_allowed { get; }
		public WebKit.DOMElement webkit_fullscreen_element { get; }
		public bool webkit_fullscreen_enabled { get; }
		public bool webkit_is_full_screen { get; }
		public WebKit.DOMElement webkit_pointer_lock_element { get; }
		public string xml_encoding { owned get; }
		public bool xml_standalone { get; set; }
		public string xml_version { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_document_fragment_get_type ()")]
	public class DOMDocumentFragment : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMDocumentFragment ();
		public unowned WebKit.DOMElement query_selector (string selectors) throws GLib.Error;
		public unowned WebKit.DOMNodeList query_selector_all (string selectors) throws GLib.Error;
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_document_type_get_type ()")]
	public class DOMDocumentType : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMDocumentType ();
		public unowned WebKit.DOMNamedNodeMap get_entities ();
		public string get_internal_subset ();
		public string get_name ();
		public unowned WebKit.DOMNamedNodeMap get_notations ();
		public string get_public_id ();
		public string get_system_id ();
		public void remove () throws GLib.Error;
		public WebKit.DOMNamedNodeMap entities { get; }
		public string internal_subset { owned get; }
		public string name { owned get; }
		public WebKit.DOMNamedNodeMap notations { get; }
		public string public_id { owned get; }
		public string system_id { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_element_get_type ()")]
	public class DOMElement : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMElement ();
		public void blur ();
		public void focus ();
		public string get_attribute (string name);
		public unowned WebKit.DOMAttr get_attribute_node (string name);
		public unowned WebKit.DOMAttr get_attribute_node_ns (string namespaceURI, string localName);
		public string get_attribute_ns (string namespaceURI, string localName);
		public unowned WebKit.DOMNamedNodeMap get_attributes ();
		public ulong get_child_element_count ();
		public unowned WebKit.DOMDOMTokenList get_class_list ();
		public string get_class_name ();
		public long get_client_height ();
		public long get_client_left ();
		public long get_client_top ();
		public long get_client_width ();
		public unowned WebKit.DOMNodeList get_elements_by_class_name (string name);
		public unowned WebKit.DOMNodeList get_elements_by_tag_name (string name);
		public unowned WebKit.DOMNodeList get_elements_by_tag_name_ns (string namespaceURI, string localName);
		public unowned WebKit.DOMElement get_first_element_child ();
		public string get_id ();
		public unowned WebKit.DOMElement get_last_element_child ();
		public unowned WebKit.DOMElement get_next_element_sibling ();
		public long get_offset_height ();
		public long get_offset_left ();
		public unowned WebKit.DOMElement get_offset_parent ();
		public long get_offset_top ();
		public long get_offset_width ();
		public unowned WebKit.DOMElement get_previous_element_sibling ();
		public long get_scroll_height ();
		public long get_scroll_left ();
		public long get_scroll_top ();
		public long get_scroll_width ();
		public unowned WebKit.DOMCSSStyleDeclaration get_style ();
		public string get_tag_name ();
		public string get_webkit_region_overflow ();
		public string get_webkit_region_overset ();
		public bool has_attribute (string name);
		public bool has_attribute_ns (string namespaceURI, string localName);
		public bool has_attributes ();
		public unowned WebKit.DOMElement query_selector (string selectors) throws GLib.Error;
		public unowned WebKit.DOMNodeList query_selector_all (string selectors) throws GLib.Error;
		public void remove () throws GLib.Error;
		public void remove_attribute (string name);
		public unowned WebKit.DOMAttr remove_attribute_node (WebKit.DOMAttr oldAttr) throws GLib.Error;
		public void remove_attribute_ns (string namespaceURI, string localName);
		public void scroll_by_lines (long lines);
		public void scroll_by_pages (long pages);
		public void scroll_into_view (bool alignWithTop);
		public void scroll_into_view_if_needed (bool centerIfNeeded);
		public void set_attribute (string name, string value) throws GLib.Error;
		public unowned WebKit.DOMAttr set_attribute_node (WebKit.DOMAttr newAttr) throws GLib.Error;
		public unowned WebKit.DOMAttr set_attribute_node_ns (WebKit.DOMAttr newAttr) throws GLib.Error;
		public void set_attribute_ns (string namespaceURI, string qualifiedName, string value) throws GLib.Error;
		public void set_class_name (string value);
		public void set_id (string value);
		public void set_scroll_left (long value);
		public void set_scroll_top (long value);
		public bool webkit_matches_selector (string selectors) throws GLib.Error;
		public void webkit_request_full_screen (ushort flags);
		public void webkit_request_fullscreen ();
		public void webkit_request_pointer_lock ();
		public WebKit.DOMNamedNodeMap attributes { get; }
		public ulong child_element_count { get; }
		public WebKit.DOMDOMTokenList class_list { get; }
		public string class_name { owned get; set; }
		public long client_height { get; }
		public long client_left { get; }
		public long client_top { get; }
		public long client_width { get; }
		public WebKit.DOMElement first_element_child { get; }
		public string id { owned get; set; }
		public WebKit.DOMElement last_element_child { get; }
		public WebKit.DOMElement next_element_sibling { get; }
		public long offset_height { get; }
		public long offset_left { get; }
		public WebKit.DOMElement offset_parent { get; }
		public long offset_top { get; }
		public long offset_width { get; }
		public WebKit.DOMElement previous_element_sibling { get; }
		public long scroll_height { get; }
		public long scroll_left { get; set; }
		public long scroll_top { get; set; }
		public long scroll_width { get; }
		public WebKit.DOMCSSStyleDeclaration style { get; }
		public string tag_name { owned get; }
		public string webkit_region_overset { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_entity_reference_get_type ()")]
	public class DOMEntityReference : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMEntityReference ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_event_get_type ()")]
	public class DOMEvent : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMEvent ();
		public bool get_bubbles ();
		public bool get_cancel_bubble ();
		public bool get_cancelable ();
		public unowned WebKit.DOMEventTarget get_current_target ();
		public bool get_default_prevented ();
		public ushort get_event_phase ();
		public bool get_return_value ();
		public unowned WebKit.DOMEventTarget get_src_element ();
		public unowned WebKit.DOMEventTarget get_target ();
		public uint32 get_time_stamp ();
		public void init_event (string eventTypeArg, bool canBubbleArg, bool cancelableArg);
		public void prevent_default ();
		public void set_cancel_bubble (bool value);
		public void set_return_value (bool value);
		public void stop_immediate_propagation ();
		public void stop_propagation ();
		public bool bubbles { get; }
		public bool cancel_bubble { get; set; }
		public bool cancelable { get; }
		public WebKit.DOMEventTarget current_target { get; }
		public bool default_prevented { get; }
		public uint event_phase { get; }
		public bool return_value { get; set; }
		public WebKit.DOMEventTarget src_element { get; }
		public WebKit.DOMEventTarget target { get; }
		public uint time_stamp { get; }
		[NoAccessorMethod]
		public string type { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h")]
	[Compact]
	public class DOMEventTargetClass {
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_file_get_type ()")]
	public class DOMFile : WebKit.DOMBlob {
		[CCode (has_construct_function = false)]
		protected DOMFile ();
		public string get_name ();
		public string get_webkit_relative_path ();
		public string name { owned get; }
		public string webkit_relative_path { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_file_list_get_type ()")]
	public class DOMFileList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMFileList ();
		public ulong get_length ();
		public unowned WebKit.DOMFile item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_gamepad_get_type ()")]
	public class DOMGamepad : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMGamepad ();
		public string get_id ();
		public ulong get_index ();
		public uint64 get_timestamp ();
		public string id { owned get; }
		public ulong index { get; }
		public uint64 timestamp { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_gamepad_list_get_type ()")]
	public class DOMGamepadList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMGamepadList ();
		public ulong get_length ();
		public unowned WebKit.DOMGamepad item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_geolocation_get_type ()")]
	public class DOMGeolocation : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMGeolocation ();
		public void clear_watch (long watchID);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_anchor_element", type_id = "webkit_dom_html_anchor_element_get_type ()")]
	public class DOMHTMLAnchorElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLAnchorElement ();
		public string get_charset ();
		public string get_coords ();
		public string get_download ();
		public string get_hash ();
		public string get_host ();
		public string get_hostname ();
		public string get_href ();
		public string get_hreflang ();
		public string get_name ();
		public string get_origin ();
		public string get_pathname ();
		public string get_ping ();
		public string get_port ();
		public string get_protocol ();
		public string get_rel ();
		public string get_rev ();
		public string get_search ();
		public string get_shape ();
		public string get_target ();
		public string get_text ();
		public void set_charset (string value);
		public void set_coords (string value);
		public void set_download (string value);
		public void set_hash (string value);
		public void set_host (string value);
		public void set_hostname (string value);
		public void set_href (string value);
		public void set_hreflang (string value);
		public void set_name (string value);
		public void set_pathname (string value);
		public void set_ping (string value);
		public void set_port (string value);
		public void set_protocol (string value);
		public void set_rel (string value);
		public void set_rev (string value);
		public void set_search (string value);
		public void set_shape (string value);
		public void set_target (string value);
		public string charset { owned get; set; }
		public string coords { owned get; set; }
		public string download { owned get; set; }
		public string hash { owned get; set; }
		public string host { owned get; set; }
		public string hostname { owned get; set; }
		public string href { owned get; set; }
		public string hreflang { owned get; set; }
		public string name { owned get; set; }
		public string origin { owned get; }
		public string pathname { owned get; set; }
		public string ping { owned get; set; }
		public string port { owned get; set; }
		public string protocol { owned get; set; }
		public string rel { owned get; set; }
		public string rev { owned get; set; }
		public string search { owned get; set; }
		public string shape { owned get; set; }
		public string target { owned get; set; }
		public string text { owned get; }
		[NoAccessorMethod]
		public string type { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_applet_element", type_id = "webkit_dom_html_applet_element_get_type ()")]
	public class DOMHTMLAppletElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLAppletElement ();
		public string get_align ();
		public string get_alt ();
		public string get_archive ();
		public string get_code ();
		public string get_code_base ();
		public string get_height ();
		public long get_hspace ();
		public string get_name ();
		public string get_object ();
		public long get_vspace ();
		public string get_width ();
		public void set_align (string value);
		public void set_alt (string value);
		public void set_archive (string value);
		public void set_code (string value);
		public void set_code_base (string value);
		public void set_height (string value);
		public void set_hspace (long value);
		public void set_name (string value);
		public void set_object (string value);
		public void set_vspace (long value);
		public void set_width (string value);
		public string align { owned get; set; }
		public string alt { owned get; set; }
		public string archive { owned get; set; }
		public string code { owned get; set; }
		public string code_base { owned get; set; }
		public string height { owned get; set; }
		public long hspace { get; set; }
		public string name { owned get; set; }
		public string object { owned get; set; }
		public long vspace { get; set; }
		public string width { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_area_element", type_id = "webkit_dom_html_area_element_get_type ()")]
	public class DOMHTMLAreaElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLAreaElement ();
		public string get_alt ();
		public string get_coords ();
		public string get_hash ();
		public string get_host ();
		public string get_hostname ();
		public string get_href ();
		public bool get_no_href ();
		public string get_pathname ();
		public string get_ping ();
		public string get_port ();
		public string get_protocol ();
		public string get_search ();
		public string get_shape ();
		public string get_target ();
		public void set_alt (string value);
		public void set_coords (string value);
		public void set_href (string value);
		public void set_no_href (bool value);
		public void set_ping (string value);
		public void set_shape (string value);
		public void set_target (string value);
		public string alt { owned get; set; }
		public string coords { owned get; set; }
		public string hash { owned get; }
		public string host { owned get; }
		public string hostname { owned get; }
		public string href { owned get; set; }
		public bool no_href { get; set; }
		public string pathname { owned get; }
		public string ping { owned get; set; }
		public string port { owned get; }
		public string protocol { owned get; }
		public string search { owned get; }
		public string shape { owned get; set; }
		public string target { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_audio_element", type_id = "webkit_dom_html_audio_element_get_type ()")]
	public class DOMHTMLAudioElement : WebKit.DOMHTMLMediaElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLAudioElement ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_htmlbr_element", type_id = "webkit_dom_htmlbr_element_get_type ()")]
	public class DOMHTMLBRElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLBRElement ();
		public string get_clear ();
		public void set_clear (string value);
		public string clear { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_base_element", type_id = "webkit_dom_html_base_element_get_type ()")]
	public class DOMHTMLBaseElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLBaseElement ();
		public string get_href ();
		public string get_target ();
		public void set_href (string value);
		public void set_target (string value);
		public string href { owned get; set; }
		public string target { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_base_font_element", type_id = "webkit_dom_html_base_font_element_get_type ()")]
	public class DOMHTMLBaseFontElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLBaseFontElement ();
		public string get_color ();
		public string get_face ();
		public long get_size ();
		public void set_color (string value);
		public void set_face (string value);
		public void set_size (long value);
		public string color { owned get; set; }
		public string face { owned get; set; }
		public long size { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_body_element", type_id = "webkit_dom_html_body_element_get_type ()")]
	public class DOMHTMLBodyElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLBodyElement ();
		public string get_a_link ();
		public string get_background ();
		public string get_bg_color ();
		public string get_link ();
		public string get_text ();
		public string get_v_link ();
		public void set_a_link (string value);
		public void set_background (string value);
		public void set_bg_color (string value);
		public void set_link (string value);
		public void set_text (string value);
		public void set_v_link (string value);
		public string a_link { owned get; set; }
		public string background { owned get; set; }
		public string bg_color { owned get; set; }
		public string link { owned get; set; }
		public string text { owned get; set; }
		public string v_link { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_button_element", type_id = "webkit_dom_html_button_element_get_type ()")]
	public class DOMHTMLButtonElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLButtonElement ();
		public bool check_validity ();
		public bool get_autofocus ();
		public bool get_disabled ();
		public unowned WebKit.DOMHTMLFormElement get_form ();
		public string get_form_action ();
		public string get_form_enctype ();
		public string get_form_method ();
		public bool get_form_no_validate ();
		public string get_form_target ();
		public unowned WebKit.DOMNodeList get_labels ();
		public string get_name ();
		public string get_validation_message ();
		public unowned WebKit.DOMValidityState get_validity ();
		public string get_value ();
		public bool get_will_validate ();
		public void set_autofocus (bool value);
		public void set_custom_validity (string error);
		public void set_disabled (bool value);
		public void set_form_action (string value);
		public void set_form_enctype (string value);
		public void set_form_method (string value);
		public void set_form_no_validate (bool value);
		public void set_form_target (string value);
		public void set_name (string value);
		public void set_value (string value);
		public bool autofocus { get; set; }
		public bool disabled { get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
		public string form_action { owned get; set; }
		public string form_enctype { owned get; set; }
		public string form_method { owned get; set; }
		public bool form_no_validate { get; set; }
		public string form_target { owned get; set; }
		public WebKit.DOMNodeList labels { get; }
		public string name { owned get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
		public string validation_message { owned get; }
		public WebKit.DOMValidityState validity { get; }
		public string value { owned get; set; }
		public bool will_validate { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_canvas_element", type_id = "webkit_dom_html_canvas_element_get_type ()")]
	public class DOMHTMLCanvasElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLCanvasElement ();
		public long get_height ();
		public long get_width ();
		public void set_height (long value);
		public void set_width (long value);
		public long height { get; set; }
		public long width { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_collection", type_id = "webkit_dom_html_collection_get_type ()")]
	public class DOMHTMLCollection : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMHTMLCollection ();
		public ulong get_length ();
		public unowned WebKit.DOMNode item (ulong index);
		public unowned WebKit.DOMNode named_item (string name);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_htmld_list_element", type_id = "webkit_dom_htmld_list_element_get_type ()")]
	public class DOMHTMLDListElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLDListElement ();
		public bool get_compact ();
		public void set_compact (bool value);
		public bool compact { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_details_element", type_id = "webkit_dom_html_details_element_get_type ()")]
	public class DOMHTMLDetailsElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLDetailsElement ();
		public bool get_open ();
		public void set_open (bool value);
		public bool open { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_directory_element", type_id = "webkit_dom_html_directory_element_get_type ()")]
	public class DOMHTMLDirectoryElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLDirectoryElement ();
		public bool get_compact ();
		public void set_compact (bool value);
		public bool compact { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_div_element", type_id = "webkit_dom_html_div_element_get_type ()")]
	public class DOMHTMLDivElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLDivElement ();
		public string get_align ();
		public void set_align (string value);
		public string align { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_document", type_id = "webkit_dom_html_document_get_type ()")]
	public class DOMHTMLDocument : WebKit.DOMDocument, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLDocument ();
		public void capture_events ();
		public void clear ();
		public void close ();
		public unowned WebKit.DOMElement get_active_element ();
		public string get_alink_color ();
		public string get_bg_color ();
		public string get_compat_mode ();
		public string get_design_mode ();
		public string get_dir ();
		public unowned WebKit.DOMHTMLCollection get_embeds ();
		public string get_fg_color ();
		public long get_height ();
		public string get_link_color ();
		public unowned WebKit.DOMHTMLCollection get_plugins ();
		public unowned WebKit.DOMHTMLCollection get_scripts ();
		public string get_vlink_color ();
		public long get_width ();
		public bool has_focus ();
		public void open ();
		public void release_events ();
		public void set_alink_color (string value);
		public void set_bg_color (string value);
		public void set_design_mode (string value);
		public void set_dir (string value);
		public void set_fg_color (string value);
		public void set_link_color (string value);
		public void set_vlink_color (string value);
		public WebKit.DOMElement active_element { get; }
		public string alink_color { owned get; set; }
		public string bg_color { owned get; set; }
		public string compat_mode { owned get; }
		public string design_mode { owned get; set; }
		public string dir { owned get; set; }
		public WebKit.DOMHTMLCollection embeds { get; }
		public string fg_color { owned get; set; }
		public long height { get; }
		public string link_color { owned get; set; }
		public WebKit.DOMHTMLCollection plugins { get; }
		public WebKit.DOMHTMLCollection scripts { get; }
		public string vlink_color { owned get; set; }
		public long width { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_element", type_id = "webkit_dom_html_element_get_type ()")]
	public class DOMHTMLElement : WebKit.DOMElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLElement ();
		public void click ();
		public string get_access_key ();
		public unowned WebKit.DOMHTMLCollection get_children ();
		public unowned WebKit.DOMDOMTokenList get_class_list ();
		public string get_class_name ();
		public string get_content_editable ();
		public string get_dir ();
		public bool get_draggable ();
		public bool get_hidden ();
		public string get_id ();
		public string get_inner_html ();
		public string get_inner_text ();
		public bool get_is_content_editable ();
		public string get_item_id ();
		public unowned WebKit.DOMDOMSettableTokenList get_item_prop ();
		public unowned WebKit.DOMDOMSettableTokenList get_item_ref ();
		public bool get_item_scope ();
		public void* get_item_type ();
		public string get_lang ();
		public string get_outer_html ();
		public string get_outer_text ();
		public bool get_spellcheck ();
		public long get_tab_index ();
		public string get_title ();
		public bool get_translate ();
		public string get_webkitdropzone ();
		public unowned WebKit.DOMElement insert_adjacent_element (string where, WebKit.DOMElement element) throws GLib.Error;
		public void insert_adjacent_html (string where, string html) throws GLib.Error;
		public void insert_adjacent_text (string where, string text) throws GLib.Error;
		public void set_access_key (string value);
		public void set_class_name (string value);
		public void set_content_editable (string value) throws GLib.Error;
		public void set_dir (string value);
		public void set_draggable (bool value);
		public void set_hidden (bool value);
		public void set_id (string value);
		public void set_inner_html (string value) throws GLib.Error;
		public void set_inner_text (string value) throws GLib.Error;
		public void set_item_id (string value);
		public void set_item_scope (bool value);
		public void set_lang (string value);
		public void set_outer_html (string value) throws GLib.Error;
		public void set_outer_text (string value) throws GLib.Error;
		public void set_spellcheck (bool value);
		public void set_tab_index (long value);
		public void set_title (string value);
		public void set_translate (bool value);
		public void set_webkitdropzone (string value);
		public string access_key { owned get; set; }
		public WebKit.DOMHTMLCollection children { get; }
		public string content_editable { owned get; set; }
		public string dir { owned get; set; }
		public bool draggable { get; set; }
		public bool hidden { get; set; }
		public string inner_html { owned get; set; }
		public string inner_text { owned get; set; }
		public bool is_content_editable { get; }
		public string lang { owned get; set; }
		public string outer_html { owned get; set; }
		public string outer_text { owned get; set; }
		public bool spellcheck { get; set; }
		public long tab_index { get; set; }
		public string title { owned get; set; }
		public bool translate { get; set; }
		public string webkitdropzone { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_embed_element", type_id = "webkit_dom_html_embed_element_get_type ()")]
	public class DOMHTMLEmbedElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLEmbedElement ();
		public string get_align ();
		public long get_height ();
		public string get_name ();
		public string get_src ();
		public long get_width ();
		public void set_align (string value);
		public void set_height (long value);
		public void set_name (string value);
		public void set_src (string value);
		public void set_width (long value);
		public string align { owned get; set; }
		public long height { get; set; }
		public string name { owned get; set; }
		public string src { owned get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
		public long width { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_field_set_element", type_id = "webkit_dom_html_field_set_element_get_type ()")]
	public class DOMHTMLFieldSetElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLFieldSetElement ();
		public bool check_validity ();
		public bool get_disabled ();
		public unowned WebKit.DOMHTMLCollection get_elements ();
		public unowned WebKit.DOMHTMLFormElement get_form ();
		public string get_name ();
		public string get_validation_message ();
		public unowned WebKit.DOMValidityState get_validity ();
		public bool get_will_validate ();
		public void set_custom_validity (string error);
		public void set_disabled (bool value);
		public void set_name (string value);
		public bool disabled { get; set; }
		public WebKit.DOMHTMLCollection elements { get; }
		public WebKit.DOMHTMLFormElement form { get; }
		public string name { owned get; set; }
		[NoAccessorMethod]
		public string type { owned get; }
		public string validation_message { owned get; }
		public WebKit.DOMValidityState validity { get; }
		public bool will_validate { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_font_element", type_id = "webkit_dom_html_font_element_get_type ()")]
	public class DOMHTMLFontElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLFontElement ();
		public string get_color ();
		public string get_face ();
		public string get_size ();
		public void set_color (string value);
		public void set_face (string value);
		public void set_size (string value);
		public string color { owned get; set; }
		public string face { owned get; set; }
		public string size { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_form_element", type_id = "webkit_dom_html_form_element_get_type ()")]
	public class DOMHTMLFormElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLFormElement ();
		public bool check_validity ();
		public void dispatch_form_change ();
		public void dispatch_form_input ();
		public string get_accept_charset ();
		public string get_action ();
		public string get_autocomplete ();
		public unowned WebKit.DOMHTMLCollection get_elements ();
		public string get_encoding ();
		public string get_enctype ();
		public long get_length ();
		public string get_method ();
		public string get_name ();
		public bool get_no_validate ();
		public string get_target ();
		public void reset ();
		public void set_accept_charset (string value);
		public void set_action (string value);
		public void set_autocomplete (string value);
		public void set_encoding (string value);
		public void set_enctype (string value);
		public void set_method (string value);
		public void set_name (string value);
		public void set_no_validate (bool value);
		public void set_target (string value);
		public void submit ();
		public string accept_charset { owned get; set; }
		public string action { owned get; set; }
		public string autocomplete { owned get; set; }
		public WebKit.DOMHTMLCollection elements { get; }
		public string encoding { owned get; set; }
		public string enctype { owned get; set; }
		public long length { get; }
		public string method { owned get; set; }
		public string name { owned get; set; }
		public bool no_validate { get; set; }
		public string target { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_frame_element", type_id = "webkit_dom_html_frame_element_get_type ()")]
	public class DOMHTMLFrameElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLFrameElement ();
		public unowned WebKit.DOMDocument get_content_document ();
		public unowned WebKit.DOMDOMWindow get_content_window ();
		public string get_frame_border ();
		public long get_height ();
		public string get_long_desc ();
		public string get_margin_height ();
		public string get_margin_width ();
		public string get_name ();
		public bool get_no_resize ();
		public string get_scrolling ();
		public string get_src ();
		public long get_width ();
		public void set_frame_border (string value);
		public void set_long_desc (string value);
		public void set_margin_height (string value);
		public void set_margin_width (string value);
		public void set_name (string value);
		public void set_no_resize (bool value);
		public void set_scrolling (string value);
		public void set_src (string value);
		public WebKit.DOMDocument content_document { get; }
		public WebKit.DOMDOMWindow content_window { get; }
		public string frame_border { owned get; set; }
		public long height { get; }
		public string long_desc { owned get; set; }
		public string margin_height { owned get; set; }
		public string margin_width { owned get; set; }
		public string name { owned get; set; }
		public bool no_resize { get; set; }
		public string scrolling { owned get; set; }
		public string src { owned get; set; }
		public long width { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_frame_set_element", type_id = "webkit_dom_html_frame_set_element_get_type ()")]
	public class DOMHTMLFrameSetElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLFrameSetElement ();
		public string get_cols ();
		public string get_rows ();
		public void set_cols (string value);
		public void set_rows (string value);
		public string cols { owned get; set; }
		public string rows { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_htmlhr_element", type_id = "webkit_dom_htmlhr_element_get_type ()")]
	public class DOMHTMLHRElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLHRElement ();
		public string get_align ();
		public bool get_no_shade ();
		public string get_size ();
		public string get_width ();
		public void set_align (string value);
		public void set_no_shade (bool value);
		public void set_size (string value);
		public void set_width (string value);
		public string align { owned get; set; }
		public bool no_shade { get; set; }
		public string size { owned get; set; }
		public string width { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_head_element", type_id = "webkit_dom_html_head_element_get_type ()")]
	public class DOMHTMLHeadElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLHeadElement ();
		public string get_profile ();
		public void set_profile (string value);
		public string profile { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_heading_element", type_id = "webkit_dom_html_heading_element_get_type ()")]
	public class DOMHTMLHeadingElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLHeadingElement ();
		public string get_align ();
		public void set_align (string value);
		public string align { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_html_element", type_id = "webkit_dom_html_html_element_get_type ()")]
	public class DOMHTMLHtmlElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLHtmlElement ();
		public string get_manifest ();
		public string get_version ();
		public void set_manifest (string value);
		public void set_version (string value);
		public string manifest { owned get; set; }
		public string version { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_iframe_element", type_id = "webkit_dom_html_iframe_element_get_type ()")]
	public class DOMHTMLIFrameElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLIFrameElement ();
		public string get_align ();
		public unowned WebKit.DOMDocument get_content_document ();
		public unowned WebKit.DOMDOMWindow get_content_window ();
		public string get_frame_border ();
		public string get_height ();
		public string get_long_desc ();
		public string get_margin_height ();
		public string get_margin_width ();
		public string get_name ();
		public string get_sandbox ();
		public string get_scrolling ();
		public bool get_seamless ();
		public string get_src ();
		public string get_srcdoc ();
		public string get_width ();
		public void set_align (string value);
		public void set_frame_border (string value);
		public void set_height (string value);
		public void set_long_desc (string value);
		public void set_margin_height (string value);
		public void set_margin_width (string value);
		public void set_name (string value);
		public void set_sandbox (string value);
		public void set_scrolling (string value);
		public void set_seamless (bool value);
		public void set_src (string value);
		public void set_srcdoc (string value);
		public void set_width (string value);
		public string align { owned get; set; }
		public WebKit.DOMDocument content_document { get; }
		public WebKit.DOMDOMWindow content_window { get; }
		public string frame_border { owned get; set; }
		public string height { owned get; set; }
		public string long_desc { owned get; set; }
		public string margin_height { owned get; set; }
		public string margin_width { owned get; set; }
		public string name { owned get; set; }
		public string sandbox { owned get; set; }
		public string scrolling { owned get; set; }
		public bool seamless { get; set; }
		public string src { owned get; set; }
		public string srcdoc { owned get; set; }
		public string width { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_image_element", type_id = "webkit_dom_html_image_element_get_type ()")]
	public class DOMHTMLImageElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLImageElement ();
		public string get_align ();
		public string get_alt ();
		public string get_border ();
		public bool get_complete ();
		public string get_cross_origin ();
		public long get_height ();
		public long get_hspace ();
		public bool get_is_map ();
		public string get_long_desc ();
		public string get_lowsrc ();
		public string get_name ();
		public long get_natural_height ();
		public long get_natural_width ();
		public string get_src ();
		public string get_srcset ();
		public string get_use_map ();
		public long get_vspace ();
		public long get_width ();
		public long get_x ();
		public long get_y ();
		public void set_align (string value);
		public void set_alt (string value);
		public void set_border (string value);
		public void set_cross_origin (string value);
		public void set_height (long value);
		public void set_hspace (long value);
		public void set_is_map (bool value);
		public void set_long_desc (string value);
		public void set_lowsrc (string value);
		public void set_name (string value);
		public void set_src (string value);
		public void set_srcset (string value);
		public void set_use_map (string value);
		public void set_vspace (long value);
		public void set_width (long value);
		public string align { owned get; set; }
		public string alt { owned get; set; }
		public string border { owned get; set; }
		public bool complete { get; }
		public string cross_origin { owned get; set; }
		public long height { get; set; }
		public long hspace { get; set; }
		public bool is_map { get; set; }
		public string long_desc { owned get; set; }
		public string lowsrc { owned get; set; }
		public string name { owned get; set; }
		public long natural_height { get; }
		public long natural_width { get; }
		public string src { owned get; set; }
		public string srcset { owned get; set; }
		public string use_map { owned get; set; }
		public long vspace { get; set; }
		public long width { get; set; }
		public long x { get; }
		public long y { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_input_element", type_id = "webkit_dom_html_input_element_get_type ()")]
	public class DOMHTMLInputElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLInputElement ();
		public bool check_validity ();
		public string get_accept ();
		public string get_align ();
		public string get_alt ();
		public string get_autocomplete ();
		public bool get_autofocus ();
		public string get_capture ();
		public bool get_checked ();
		public bool get_default_checked ();
		public string get_default_value ();
		public string get_dir_name ();
		public bool get_disabled ();
		public unowned WebKit.DOMFileList get_files ();
		public unowned WebKit.DOMHTMLFormElement get_form ();
		public string get_form_action ();
		public string get_form_enctype ();
		public string get_form_method ();
		public bool get_form_no_validate ();
		public string get_form_target ();
		public ulong get_height ();
		public bool get_incremental ();
		public bool get_indeterminate ();
		public unowned WebKit.DOMNodeList get_labels ();
		public unowned WebKit.DOMHTMLElement get_list ();
		public string get_max ();
		public long get_max_length ();
		public string get_min ();
		public bool get_multiple ();
		public string get_name ();
		public string get_pattern ();
		public string get_placeholder ();
		public bool get_read_only ();
		public bool get_required ();
		public ulong get_size ();
		public string get_src ();
		public string get_step ();
		public string get_use_map ();
		public string get_validation_message ();
		public unowned WebKit.DOMValidityState get_validity ();
		public string get_value ();
		public double get_value_as_number ();
		public bool get_webkit_grammar ();
		public bool get_webkit_speech ();
		public bool get_webkitdirectory ();
		public ulong get_width ();
		public bool get_will_validate ();
		public bool is_edited ();
		public void select ();
		public void set_accept (string value);
		public void set_align (string value);
		public void set_alt (string value);
		public void set_autocomplete (string value);
		public void set_autofocus (bool value);
		public void set_capture (string value);
		public void set_checked (bool value);
		public void set_custom_validity (string error);
		public void set_default_checked (bool value);
		public void set_default_value (string value);
		public void set_dir_name (string value);
		public void set_disabled (bool value);
		public void set_files (WebKit.DOMFileList value);
		public void set_form_action (string value);
		public void set_form_enctype (string value);
		public void set_form_method (string value);
		public void set_form_no_validate (bool value);
		public void set_form_target (string value);
		public void set_height (ulong value);
		public void set_incremental (bool value);
		public void set_indeterminate (bool value);
		public void set_max (string value);
		public void set_max_length (long value) throws GLib.Error;
		public void set_min (string value);
		public void set_multiple (bool value);
		public void set_name (string value);
		public void set_pattern (string value);
		public void set_placeholder (string value);
		public void set_range_text (string replacement, ulong start, ulong end, string selectionMode) throws GLib.Error;
		public void set_read_only (bool value);
		public void set_required (bool value);
		public void set_size (ulong value) throws GLib.Error;
		public void set_src (string value);
		public void set_step (string value);
		public void set_use_map (string value);
		public void set_value (string value);
		public void set_value_as_number (double value) throws GLib.Error;
		public void set_value_for_user (string value);
		public void set_webkit_grammar (bool value);
		public void set_webkit_speech (bool value);
		public void set_webkitdirectory (bool value);
		public void set_width (ulong value);
		public void step_down (long n) throws GLib.Error;
		public void step_up (long n) throws GLib.Error;
		public string accept { owned get; set; }
		public string align { owned get; set; }
		public string alt { owned get; set; }
		public string autocomplete { owned get; set; }
		public bool autofocus { get; set; }
		public string capture { owned get; set; }
		public bool checked { get; set; }
		public bool default_checked { get; set; }
		public string default_value { owned get; set; }
		public string dir_name { owned get; set; }
		public bool disabled { get; set; }
		public WebKit.DOMFileList files { get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
		public string form_action { owned get; set; }
		public string form_enctype { owned get; set; }
		public string form_method { owned get; set; }
		public bool form_no_validate { get; set; }
		public string form_target { owned get; set; }
		public ulong height { get; set; }
		public bool incremental { get; set; }
		public bool indeterminate { get; set; }
		public WebKit.DOMNodeList labels { get; }
		public WebKit.DOMHTMLElement list { get; }
		public string max { owned get; set; }
		public long max_length { get; set; }
		public string min { owned get; set; }
		public bool multiple { get; set; }
		public string name { owned get; set; }
		public string pattern { owned get; set; }
		public string placeholder { owned get; set; }
		public bool read_only { get; set; }
		public bool required { get; set; }
		public ulong size { get; set; }
		public string src { owned get; set; }
		public string step { owned get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
		public string use_map { owned get; set; }
		public string validation_message { owned get; }
		public WebKit.DOMValidityState validity { get; }
		public string value { owned get; set; }
		public double value_as_number { get; set; }
		public bool webkit_grammar { get; set; }
		public bool webkit_speech { get; set; }
		public bool webkitdirectory { get; set; }
		public ulong width { get; set; }
		public bool will_validate { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_keygen_element", type_id = "webkit_dom_html_keygen_element_get_type ()")]
	public class DOMHTMLKeygenElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLKeygenElement ();
		public bool check_validity ();
		public bool get_autofocus ();
		public string get_challenge ();
		public bool get_disabled ();
		public unowned WebKit.DOMHTMLFormElement get_form ();
		public string get_keytype ();
		public unowned WebKit.DOMNodeList get_labels ();
		public string get_name ();
		public string get_validation_message ();
		public unowned WebKit.DOMValidityState get_validity ();
		public bool get_will_validate ();
		public void set_autofocus (bool value);
		public void set_challenge (string value);
		public void set_custom_validity (string error);
		public void set_disabled (bool value);
		public void set_keytype (string value);
		public void set_name (string value);
		public bool autofocus { get; set; }
		public string challenge { owned get; set; }
		public bool disabled { get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
		public string keytype { owned get; set; }
		public WebKit.DOMNodeList labels { get; }
		public string name { owned get; set; }
		[NoAccessorMethod]
		public string type { owned get; }
		public string validation_message { owned get; }
		public WebKit.DOMValidityState validity { get; }
		public bool will_validate { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_htmlli_element", type_id = "webkit_dom_htmlli_element_get_type ()")]
	public class DOMHTMLLIElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLLIElement ();
		public long get_value ();
		public void set_value (long value);
		[NoAccessorMethod]
		public string type { owned get; set; }
		public long value { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_label_element", type_id = "webkit_dom_html_label_element_get_type ()")]
	public class DOMHTMLLabelElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLLabelElement ();
		public unowned WebKit.DOMHTMLElement get_control ();
		public unowned WebKit.DOMHTMLFormElement get_form ();
		public string get_html_for ();
		public void set_html_for (string value);
		public WebKit.DOMHTMLElement control { get; }
		public WebKit.DOMHTMLFormElement form { get; }
		public string html_for { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_legend_element", type_id = "webkit_dom_html_legend_element_get_type ()")]
	public class DOMHTMLLegendElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLLegendElement ();
		public string get_align ();
		public unowned WebKit.DOMHTMLFormElement get_form ();
		public void set_align (string value);
		public string align { owned get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_link_element", type_id = "webkit_dom_html_link_element_get_type ()")]
	public class DOMHTMLLinkElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLLinkElement ();
		public string get_charset ();
		public bool get_disabled ();
		public string get_href ();
		public string get_hreflang ();
		public string get_media ();
		public string get_rel ();
		public string get_rev ();
		public unowned WebKit.DOMStyleSheet get_sheet ();
		public string get_target ();
		public void set_charset (string value);
		public void set_disabled (bool value);
		public void set_href (string value);
		public void set_hreflang (string value);
		public void set_media (string value);
		public void set_rel (string value);
		public void set_rev (string value);
		public void set_target (string value);
		public string charset { owned get; set; }
		public bool disabled { get; set; }
		public string href { owned get; set; }
		public string hreflang { owned get; set; }
		public string media { owned get; set; }
		public string rel { owned get; set; }
		public string rev { owned get; set; }
		public WebKit.DOMStyleSheet sheet { get; }
		public string target { owned get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_map_element", type_id = "webkit_dom_html_map_element_get_type ()")]
	public class DOMHTMLMapElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLMapElement ();
		public unowned WebKit.DOMHTMLCollection get_areas ();
		public string get_name ();
		public void set_name (string value);
		public WebKit.DOMHTMLCollection areas { get; }
		public string name { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_marquee_element", type_id = "webkit_dom_html_marquee_element_get_type ()")]
	public class DOMHTMLMarqueeElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLMarqueeElement ();
		public string get_behavior ();
		public string get_bg_color ();
		public string get_direction ();
		public string get_height ();
		public ulong get_hspace ();
		public long get_loop ();
		public long get_scroll_amount ();
		public long get_scroll_delay ();
		public bool get_true_speed ();
		public ulong get_vspace ();
		public string get_width ();
		public void set_behavior (string value);
		public void set_bg_color (string value);
		public void set_direction (string value);
		public void set_height (string value);
		public void set_hspace (ulong value);
		public void set_loop (long value) throws GLib.Error;
		public void set_scroll_amount (long value) throws GLib.Error;
		public void set_scroll_delay (long value) throws GLib.Error;
		public void set_true_speed (bool value);
		public void set_vspace (ulong value);
		public void set_width (string value);
		public void start ();
		public void stop ();
		public string behavior { owned get; set; }
		public string bg_color { owned get; set; }
		public string direction { owned get; set; }
		public string height { owned get; set; }
		public ulong hspace { get; set; }
		public long loop { get; set; }
		public long scroll_amount { get; set; }
		public long scroll_delay { get; set; }
		public bool true_speed { get; set; }
		public ulong vspace { get; set; }
		public string width { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_media_element", type_id = "webkit_dom_html_media_element_get_type ()")]
	public class DOMHTMLMediaElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLMediaElement ();
		public string can_play_type (string type);
		public void fast_seek (double time);
		public bool get_autoplay ();
		public unowned WebKit.DOMTimeRanges get_buffered ();
		public bool get_controls ();
		public string get_current_src ();
		public double get_current_time ();
		public bool get_default_muted ();
		public double get_default_playback_rate ();
		public double get_duration ();
		public bool get_ended ();
		public unowned WebKit.DOMMediaError get_error ();
		public double get_initial_time ();
		public bool get_loop ();
		public string get_media_group ();
		public bool get_muted ();
		public ushort get_network_state ();
		public bool get_paused ();
		public double get_playback_rate ();
		public unowned WebKit.DOMTimeRanges get_played ();
		public string get_preload ();
		public ushort get_ready_state ();
		public unowned WebKit.DOMTimeRanges get_seekable ();
		public bool get_seeking ();
		public string get_src ();
		public double get_start_time ();
		public double get_volume ();
		public ulong get_webkit_audio_decoded_byte_count ();
		public bool get_webkit_closed_captions_visible ();
		public bool get_webkit_has_closed_captions ();
		public bool get_webkit_preserves_pitch ();
		public ulong get_webkit_video_decoded_byte_count ();
		public void load ();
		public void pause ();
		public void play ();
		public void set_autoplay (bool value);
		public void set_controls (bool value);
		public void set_current_time (double value) throws GLib.Error;
		public void set_default_muted (bool value);
		public void set_default_playback_rate (double value);
		public void set_loop (bool value);
		public void set_media_group (string value);
		public void set_muted (bool value);
		public void set_playback_rate (double value);
		public void set_preload (string value);
		public void set_src (string value);
		public void set_volume (double value) throws GLib.Error;
		public void set_webkit_closed_captions_visible (bool value);
		public void set_webkit_preserves_pitch (bool value);
		public bool autoplay { get; set; }
		public WebKit.DOMTimeRanges buffered { get; }
		public bool controls { get; set; }
		public string current_src { owned get; }
		public double current_time { get; set; }
		public bool default_muted { get; set; }
		public double default_playback_rate { get; set; }
		public double duration { get; }
		public bool ended { get; }
		public WebKit.DOMMediaError error { get; }
		public bool loop { get; set; }
		public string media_group { owned get; set; }
		public bool muted { get; set; }
		public uint network_state { get; }
		public bool paused { get; }
		public double playback_rate { get; set; }
		public WebKit.DOMTimeRanges played { get; }
		public string preload { owned get; set; }
		public uint ready_state { get; }
		public WebKit.DOMTimeRanges seekable { get; }
		public bool seeking { get; }
		public string src { owned get; set; }
		public double volume { get; set; }
		public ulong webkit_audio_decoded_byte_count { get; }
		public bool webkit_closed_captions_visible { get; set; }
		public bool webkit_has_closed_captions { get; }
		public bool webkit_preserves_pitch { get; set; }
		public ulong webkit_video_decoded_byte_count { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_menu_element", type_id = "webkit_dom_html_menu_element_get_type ()")]
	public class DOMHTMLMenuElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLMenuElement ();
		public bool get_compact ();
		public void set_compact (bool value);
		public bool compact { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_meta_element", type_id = "webkit_dom_html_meta_element_get_type ()")]
	public class DOMHTMLMetaElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLMetaElement ();
		public string get_content ();
		public string get_http_equiv ();
		public string get_name ();
		public string get_scheme ();
		public void set_content (string value);
		public void set_http_equiv (string value);
		public void set_name (string value);
		public void set_scheme (string value);
		public string content { owned get; set; }
		public string http_equiv { owned get; set; }
		public string name { owned get; set; }
		public string scheme { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_mod_element", type_id = "webkit_dom_html_mod_element_get_type ()")]
	public class DOMHTMLModElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLModElement ();
		public string get_cite ();
		public string get_date_time ();
		public void set_cite (string value);
		public void set_date_time (string value);
		public string cite { owned get; set; }
		public string date_time { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_htmlo_list_element", type_id = "webkit_dom_htmlo_list_element_get_type ()")]
	public class DOMHTMLOListElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLOListElement ();
		public bool get_compact ();
		public bool get_reversed ();
		public long get_start ();
		public void set_compact (bool value);
		public void set_reversed (bool value);
		public void set_start (long value);
		public bool compact { get; set; }
		public bool reversed { get; set; }
		public long start { get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_object_element", type_id = "webkit_dom_html_object_element_get_type ()")]
	public class DOMHTMLObjectElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLObjectElement ();
		public bool check_validity ();
		public string get_align ();
		public string get_archive ();
		public string get_border ();
		public string get_code ();
		public string get_code_base ();
		public string get_code_type ();
		public unowned WebKit.DOMDocument get_content_document ();
		public string get_data ();
		public bool get_declare ();
		public unowned WebKit.DOMHTMLFormElement get_form ();
		public string get_height ();
		public long get_hspace ();
		public string get_name ();
		public string get_standby ();
		public string get_use_map ();
		public string get_validation_message ();
		public unowned WebKit.DOMValidityState get_validity ();
		public long get_vspace ();
		public string get_width ();
		public bool get_will_validate ();
		public void set_align (string value);
		public void set_archive (string value);
		public void set_border (string value);
		public void set_code (string value);
		public void set_code_base (string value);
		public void set_code_type (string value);
		public void set_custom_validity (string error);
		public void set_data (string value);
		public void set_declare (bool value);
		public void set_height (string value);
		public void set_hspace (long value);
		public void set_name (string value);
		public void set_standby (string value);
		public void set_use_map (string value);
		public void set_vspace (long value);
		public void set_width (string value);
		public string align { owned get; set; }
		public string archive { owned get; set; }
		public string border { owned get; set; }
		public string code { owned get; set; }
		public string code_base { owned get; set; }
		public string code_type { owned get; set; }
		public WebKit.DOMDocument content_document { get; }
		public string data { owned get; set; }
		public bool declare { get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
		public string height { owned get; set; }
		public long hspace { get; set; }
		public string name { owned get; set; }
		public string standby { owned get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
		public string use_map { owned get; set; }
		public string validation_message { owned get; }
		public WebKit.DOMValidityState validity { get; }
		public long vspace { get; set; }
		public string width { owned get; set; }
		public bool will_validate { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_opt_group_element", type_id = "webkit_dom_html_opt_group_element_get_type ()")]
	public class DOMHTMLOptGroupElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLOptGroupElement ();
		public bool get_disabled ();
		public string get_label ();
		public void set_disabled (bool value);
		public void set_label (string value);
		public bool disabled { get; set; }
		public string label { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_option_element", type_id = "webkit_dom_html_option_element_get_type ()")]
	public class DOMHTMLOptionElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLOptionElement ();
		public bool get_default_selected ();
		public bool get_disabled ();
		public unowned WebKit.DOMHTMLFormElement get_form ();
		public long get_index ();
		public string get_label ();
		public bool get_selected ();
		public string get_text ();
		public string get_value ();
		public void set_default_selected (bool value);
		public void set_disabled (bool value);
		public void set_label (string value);
		public void set_selected (bool value);
		public void set_value (string value);
		public bool default_selected { get; set; }
		public bool disabled { get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
		public long index { get; }
		public string label { owned get; set; }
		public bool selected { get; set; }
		public string text { owned get; }
		public string value { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_options_collection", type_id = "webkit_dom_html_options_collection_get_type ()")]
	public class DOMHTMLOptionsCollection : WebKit.DOMHTMLCollection {
		[CCode (has_construct_function = false)]
		protected DOMHTMLOptionsCollection ();
		public long get_selected_index ();
		public unowned WebKit.DOMNode named_item (string name);
		public void set_selected_index (long value);
		public long selected_index { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_paragraph_element", type_id = "webkit_dom_html_paragraph_element_get_type ()")]
	public class DOMHTMLParagraphElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLParagraphElement ();
		public string get_align ();
		public void set_align (string value);
		public string align { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_param_element", type_id = "webkit_dom_html_param_element_get_type ()")]
	public class DOMHTMLParamElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLParamElement ();
		public string get_name ();
		public string get_value ();
		public string get_value_type ();
		public void set_name (string value);
		public void set_value (string value);
		public void set_value_type (string value);
		public string name { owned get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
		public string value { owned get; set; }
		public string value_type { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_pre_element", type_id = "webkit_dom_html_pre_element_get_type ()")]
	public class DOMHTMLPreElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLPreElement ();
		public long get_width ();
		public bool get_wrap ();
		public void set_width (long value);
		public void set_wrap (bool value);
		public long width { get; set; }
		public bool wrap { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_properties_collection", type_id = "webkit_dom_html_properties_collection_get_type ()")]
	public class DOMHTMLPropertiesCollection : WebKit.DOMHTMLCollection {
		[CCode (has_construct_function = false)]
		protected DOMHTMLPropertiesCollection ();
		public static ulong get_length (void* self);
		public static unowned WebKit.DOMDOMStringList get_names (void* self);
		public static unowned WebKit.DOMNode item (void* self, ulong index);
		public static void* named_item (void* self, string name);
		[NoAccessorMethod]
		public ulong length { get; }
		[NoAccessorMethod]
		public WebKit.DOMDOMStringList names { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_quote_element", type_id = "webkit_dom_html_quote_element_get_type ()")]
	public class DOMHTMLQuoteElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLQuoteElement ();
		public string get_cite ();
		public void set_cite (string value);
		public string cite { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_script_element", type_id = "webkit_dom_html_script_element_get_type ()")]
	public class DOMHTMLScriptElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLScriptElement ();
		public bool get_async ();
		public string get_charset ();
		public string get_cross_origin ();
		public bool get_defer ();
		public string get_event ();
		public string get_html_for ();
		public string get_nonce ();
		public string get_src ();
		public string get_text ();
		public void set_async (bool value);
		public void set_charset (string value);
		public void set_cross_origin (string value);
		public void set_defer (bool value);
		public void set_event (string value);
		public void set_html_for (string value);
		public void set_nonce (string value);
		public void set_src (string value);
		public void set_text (string value);
		public bool @async { get; set; }
		public string charset { owned get; set; }
		public string cross_origin { owned get; set; }
		public bool defer { get; set; }
		public string event { owned get; set; }
		public string html_for { owned get; set; }
		public string nonce { owned get; set; }
		public string src { owned get; set; }
		public string text { owned get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_select_element", type_id = "webkit_dom_html_select_element_get_type ()")]
	public class DOMHTMLSelectElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLSelectElement ();
		public void add (WebKit.DOMHTMLElement element, WebKit.DOMHTMLElement before) throws GLib.Error;
		public bool check_validity ();
		public bool get_autofocus ();
		public bool get_disabled ();
		public unowned WebKit.DOMHTMLFormElement get_form ();
		public unowned WebKit.DOMNodeList get_labels ();
		public ulong get_length ();
		public bool get_multiple ();
		public string get_name ();
		public unowned WebKit.DOMHTMLOptionsCollection get_options ();
		public bool get_required ();
		public long get_selected_index ();
		public unowned WebKit.DOMHTMLCollection get_selected_options ();
		public long get_size ();
		public string get_validation_message ();
		public unowned WebKit.DOMValidityState get_validity ();
		public string get_value ();
		public bool get_will_validate ();
		public unowned WebKit.DOMNode item (ulong index);
		public unowned WebKit.DOMNode named_item (string name);
		public void remove (long index);
		public void set_autofocus (bool value);
		public void set_custom_validity (string error);
		public void set_disabled (bool value);
		public void set_length (ulong value) throws GLib.Error;
		public void set_multiple (bool value);
		public void set_name (string value);
		public void set_required (bool value);
		public void set_selected_index (long value);
		public void set_size (long value);
		public void set_value (string value);
		public bool autofocus { get; set; }
		public bool disabled { get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
		public WebKit.DOMNodeList labels { get; }
		public ulong length { get; set; }
		public bool multiple { get; set; }
		public string name { owned get; set; }
		public WebKit.DOMHTMLOptionsCollection options { get; }
		public bool required { get; set; }
		public long selected_index { get; set; }
		public WebKit.DOMHTMLCollection selected_options { get; }
		public long size { get; set; }
		[NoAccessorMethod]
		public string type { owned get; }
		public string validation_message { owned get; }
		public WebKit.DOMValidityState validity { get; }
		public string value { owned get; set; }
		public bool will_validate { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_style_element", type_id = "webkit_dom_html_style_element_get_type ()")]
	public class DOMHTMLStyleElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLStyleElement ();
		public bool get_disabled ();
		public string get_media ();
		public bool get_scoped ();
		public unowned WebKit.DOMStyleSheet get_sheet ();
		public void set_disabled (bool value);
		public void set_media (string value);
		public void set_scoped (bool value);
		public bool disabled { get; set; }
		public string media { owned get; set; }
		public WebKit.DOMStyleSheet sheet { get; }
		[NoAccessorMethod]
		public string type { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_table_caption_element", type_id = "webkit_dom_html_table_caption_element_get_type ()")]
	public class DOMHTMLTableCaptionElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTableCaptionElement ();
		public string get_align ();
		public void set_align (string value);
		public string align { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_table_cell_element", type_id = "webkit_dom_html_table_cell_element_get_type ()")]
	public class DOMHTMLTableCellElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTableCellElement ();
		public string get_abbr ();
		public string get_align ();
		public string get_axis ();
		public string get_bg_color ();
		public long get_cell_index ();
		public string get_ch ();
		public string get_ch_off ();
		public long get_col_span ();
		public string get_headers ();
		public string get_height ();
		public bool get_no_wrap ();
		public long get_row_span ();
		public string get_scope ();
		public string get_v_align ();
		public string get_width ();
		public void set_abbr (string value);
		public void set_align (string value);
		public void set_axis (string value);
		public void set_bg_color (string value);
		public void set_ch (string value);
		public void set_ch_off (string value);
		public void set_col_span (long value);
		public void set_headers (string value);
		public void set_height (string value);
		public void set_no_wrap (bool value);
		public void set_row_span (long value);
		public void set_scope (string value);
		public void set_v_align (string value);
		public void set_width (string value);
		public string abbr { owned get; set; }
		public string align { owned get; set; }
		public string axis { owned get; set; }
		public string bg_color { owned get; set; }
		public long cell_index { get; }
		public string ch { owned get; set; }
		public string ch_off { owned get; set; }
		public long col_span { get; set; }
		public string headers { owned get; set; }
		public string height { owned get; set; }
		public bool no_wrap { get; set; }
		public long row_span { get; set; }
		public string scope { owned get; set; }
		public string v_align { owned get; set; }
		public string width { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_table_col_element", type_id = "webkit_dom_html_table_col_element_get_type ()")]
	public class DOMHTMLTableColElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTableColElement ();
		public string get_align ();
		public string get_ch ();
		public string get_ch_off ();
		public long get_span ();
		public string get_v_align ();
		public string get_width ();
		public void set_align (string value);
		public void set_ch (string value);
		public void set_ch_off (string value);
		public void set_span (long value);
		public void set_v_align (string value);
		public void set_width (string value);
		public string align { owned get; set; }
		public string ch { owned get; set; }
		public string ch_off { owned get; set; }
		public long span { get; set; }
		public string v_align { owned get; set; }
		public string width { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_table_element", type_id = "webkit_dom_html_table_element_get_type ()")]
	public class DOMHTMLTableElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTableElement ();
		public unowned WebKit.DOMHTMLElement create_caption ();
		public unowned WebKit.DOMHTMLElement create_t_body ();
		public unowned WebKit.DOMHTMLElement create_t_foot ();
		public unowned WebKit.DOMHTMLElement create_t_head ();
		public void delete_caption ();
		public void delete_row (long index) throws GLib.Error;
		public void delete_t_foot ();
		public void delete_t_head ();
		public string get_align ();
		public string get_bg_color ();
		public string get_border ();
		public unowned WebKit.DOMHTMLTableCaptionElement get_caption ();
		public string get_cell_padding ();
		public string get_cell_spacing ();
		public string get_frame ();
		public unowned WebKit.DOMHTMLCollection get_rows ();
		public string get_rules ();
		public string get_summary ();
		public unowned WebKit.DOMHTMLCollection get_t_bodies ();
		public unowned WebKit.DOMHTMLTableSectionElement get_t_foot ();
		public unowned WebKit.DOMHTMLTableSectionElement get_t_head ();
		public string get_width ();
		public unowned WebKit.DOMHTMLElement insert_row (long index) throws GLib.Error;
		public void set_align (string value);
		public void set_bg_color (string value);
		public void set_border (string value);
		public void set_caption (WebKit.DOMHTMLTableCaptionElement value) throws GLib.Error;
		public void set_cell_padding (string value);
		public void set_cell_spacing (string value);
		public void set_frame (string value);
		public void set_rules (string value);
		public void set_summary (string value);
		public void set_t_foot (WebKit.DOMHTMLTableSectionElement value) throws GLib.Error;
		public void set_t_head (WebKit.DOMHTMLTableSectionElement value) throws GLib.Error;
		public void set_width (string value);
		public string align { owned get; set; }
		public string bg_color { owned get; set; }
		public string border { owned get; set; }
		public WebKit.DOMHTMLTableCaptionElement caption { get; set; }
		public string cell_padding { owned get; set; }
		public string cell_spacing { owned get; set; }
		public string frame { owned get; set; }
		public WebKit.DOMHTMLCollection rows { get; }
		public string rules { owned get; set; }
		public string summary { owned get; set; }
		public WebKit.DOMHTMLCollection t_bodies { get; }
		public WebKit.DOMHTMLTableSectionElement t_foot { get; set; }
		public WebKit.DOMHTMLTableSectionElement t_head { get; set; }
		public string width { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_table_row_element", type_id = "webkit_dom_html_table_row_element_get_type ()")]
	public class DOMHTMLTableRowElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTableRowElement ();
		public void delete_cell (long index) throws GLib.Error;
		public string get_align ();
		public string get_bg_color ();
		public unowned WebKit.DOMHTMLCollection get_cells ();
		public string get_ch ();
		public string get_ch_off ();
		public long get_row_index ();
		public long get_section_row_index ();
		public string get_v_align ();
		public unowned WebKit.DOMHTMLElement insert_cell (long index) throws GLib.Error;
		public void set_align (string value);
		public void set_bg_color (string value);
		public void set_ch (string value);
		public void set_ch_off (string value);
		public void set_v_align (string value);
		public string align { owned get; set; }
		public string bg_color { owned get; set; }
		public WebKit.DOMHTMLCollection cells { get; }
		public string ch { owned get; set; }
		public string ch_off { owned get; set; }
		public long row_index { get; }
		public long section_row_index { get; }
		public string v_align { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_table_section_element", type_id = "webkit_dom_html_table_section_element_get_type ()")]
	public class DOMHTMLTableSectionElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTableSectionElement ();
		public void delete_row (long index) throws GLib.Error;
		public string get_align ();
		public string get_ch ();
		public string get_ch_off ();
		public unowned WebKit.DOMHTMLCollection get_rows ();
		public string get_v_align ();
		public unowned WebKit.DOMHTMLElement insert_row (long index) throws GLib.Error;
		public void set_align (string value);
		public void set_ch (string value);
		public void set_ch_off (string value);
		public void set_v_align (string value);
		public string align { owned get; set; }
		public string ch { owned get; set; }
		public string ch_off { owned get; set; }
		public WebKit.DOMHTMLCollection rows { get; }
		public string v_align { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_text_area_element", type_id = "webkit_dom_html_text_area_element_get_type ()")]
	public class DOMHTMLTextAreaElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTextAreaElement ();
		public bool check_validity ();
		public bool get_autofocus ();
		public long get_cols ();
		public string get_default_value ();
		public string get_dir_name ();
		public bool get_disabled ();
		public unowned WebKit.DOMHTMLFormElement get_form ();
		public unowned WebKit.DOMNodeList get_labels ();
		public long get_max_length ();
		public string get_name ();
		public string get_placeholder ();
		public bool get_read_only ();
		public bool get_required ();
		public long get_rows ();
		public string get_selection_direction ();
		public long get_selection_end ();
		public long get_selection_start ();
		public ulong get_text_length ();
		public string get_validation_message ();
		public unowned WebKit.DOMValidityState get_validity ();
		public string get_value ();
		public bool get_will_validate ();
		public string get_wrap ();
		public bool is_edited ();
		public void select ();
		public void set_autofocus (bool value);
		public void set_cols (long value);
		public void set_custom_validity (string error);
		public void set_default_value (string value);
		public void set_dir_name (string value);
		public void set_disabled (bool value);
		public void set_max_length (long value) throws GLib.Error;
		public void set_name (string value);
		public void set_placeholder (string value);
		public void set_range_text (string replacement, ulong start, ulong end, string selectionMode) throws GLib.Error;
		public void set_read_only (bool value);
		public void set_required (bool value);
		public void set_rows (long value);
		public void set_selection_direction (string value);
		public void set_selection_end (long value);
		public void set_selection_range (long start, long end, string direction);
		public void set_selection_start (long value);
		public void set_value (string value);
		public void set_wrap (string value);
		public bool autofocus { get; set; }
		public long cols { get; set; }
		public string default_value { owned get; set; }
		public string dir_name { owned get; set; }
		public bool disabled { get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
		public WebKit.DOMNodeList labels { get; }
		public long max_length { get; set; }
		public string name { owned get; set; }
		public string placeholder { owned get; set; }
		public bool read_only { get; set; }
		public bool required { get; set; }
		public long rows { get; set; }
		public string selection_direction { owned get; set; }
		public long selection_end { get; set; }
		public long selection_start { get; set; }
		public ulong text_length { get; }
		[NoAccessorMethod]
		public string type { owned get; }
		public string validation_message { owned get; }
		public WebKit.DOMValidityState validity { get; }
		public string value { owned get; set; }
		public bool will_validate { get; }
		public string wrap { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_title_element", type_id = "webkit_dom_html_title_element_get_type ()")]
	public class DOMHTMLTitleElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTitleElement ();
		public string get_text ();
		public void set_text (string value);
		public string text { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_htmlu_list_element", type_id = "webkit_dom_htmlu_list_element_get_type ()")]
	public class DOMHTMLUListElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLUListElement ();
		public bool get_compact ();
		public void set_compact (bool value);
		public bool compact { get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_html_video_element", type_id = "webkit_dom_html_video_element_get_type ()")]
	public class DOMHTMLVideoElement : WebKit.DOMHTMLMediaElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLVideoElement ();
		public ulong get_height ();
		public string get_poster ();
		public ulong get_video_height ();
		public ulong get_video_width ();
		public ulong get_webkit_decoded_frame_count ();
		public bool get_webkit_displaying_fullscreen ();
		public ulong get_webkit_dropped_frame_count ();
		public bool get_webkit_supports_fullscreen ();
		public ulong get_width ();
		public void set_height (ulong value);
		public void set_poster (string value);
		public void set_width (ulong value);
		public void webkit_enter_full_screen () throws GLib.Error;
		public void webkit_enter_fullscreen () throws GLib.Error;
		public void webkit_exit_full_screen ();
		public void webkit_exit_fullscreen ();
		public ulong height { get; set; }
		public string poster { owned get; set; }
		public ulong video_height { get; }
		public ulong video_width { get; }
		public ulong webkit_decoded_frame_count { get; }
		public bool webkit_displaying_fullscreen { get; }
		public ulong webkit_dropped_frame_count { get; }
		public bool webkit_supports_fullscreen { get; }
		public ulong width { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_history_get_type ()")]
	public class DOMHistory : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMHistory ();
		public void back ();
		public void forward ();
		public ulong get_length ();
		public void go (long distance);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_keyboard_event_get_type ()")]
	public class DOMKeyboardEvent : WebKit.DOMUIEvent {
		[CCode (has_construct_function = false)]
		protected DOMKeyboardEvent ();
		public bool get_alt_graph_key ();
		public bool get_alt_key ();
		public bool get_ctrl_key ();
		public string get_key_identifier ();
		public ulong get_key_location ();
		public bool get_meta_key ();
		public bool get_modifier_state (string keyIdentifierArg);
		public bool get_shift_key ();
		public void init_keyboard_event (string type, bool canBubble, bool cancelable, WebKit.DOMDOMWindow view, string keyIdentifier, ulong location, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, bool altGraphKey);
		public bool alt_graph_key { get; }
		public bool alt_key { get; }
		public bool ctrl_key { get; }
		public string key_identifier { owned get; }
		public ulong key_location { get; }
		public bool meta_key { get; }
		public bool shift_key { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_location_get_type ()")]
	public class DOMLocation : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMLocation ();
		public unowned WebKit.DOMDOMStringList get_ancestor_origins ();
		public string get_origin ();
		public WebKit.DOMDOMStringList ancestor_origins { get; }
		public string origin { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_media_error_get_type ()")]
	public class DOMMediaError : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMMediaError ();
		public ushort get_code ();
		public uint code { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_media_list_get_type ()")]
	public class DOMMediaList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMMediaList ();
		public void append_medium (string newMedium) throws GLib.Error;
		public void delete_medium (string oldMedium) throws GLib.Error;
		public ulong get_length ();
		public string get_media_text ();
		public string item (ulong index);
		public void set_media_text (string value) throws GLib.Error;
		public ulong length { get; }
		public string media_text { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_media_query_list_get_type ()")]
	public class DOMMediaQueryList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMMediaQueryList ();
		public bool get_matches ();
		public string get_media ();
		public bool matches { get; }
		public string media { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_memory_info_get_type ()")]
	public class DOMMemoryInfo : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMMemoryInfo ();
		public static ulong get_js_heap_size_limit (void* self);
		public static ulong get_total_js_heap_size (void* self);
		public static ulong get_used_js_heap_size (void* self);
		[NoAccessorMethod]
		public ulong js_heap_size_limit { get; }
		[NoAccessorMethod]
		public ulong total_js_heap_size { get; }
		[NoAccessorMethod]
		public ulong used_js_heap_size { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_message_port_get_type ()")]
	public class DOMMessagePort : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMMessagePort ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_micro_data_item_value_get_type ()")]
	public class DOMMicroDataItemValue : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMMicroDataItemValue ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_mouse_event_get_type ()")]
	public class DOMMouseEvent : WebKit.DOMUIEvent {
		[CCode (has_construct_function = false)]
		protected DOMMouseEvent ();
		public bool get_alt_key ();
		public ushort get_button ();
		public long get_client_x ();
		public long get_client_y ();
		public bool get_ctrl_key ();
		public unowned WebKit.DOMNode get_from_element ();
		public bool get_meta_key ();
		public long get_offset_x ();
		public long get_offset_y ();
		public unowned WebKit.DOMEventTarget get_related_target ();
		public long get_screen_x ();
		public long get_screen_y ();
		public bool get_shift_key ();
		public unowned WebKit.DOMNode get_to_element ();
		public long get_webkit_movement_x ();
		public long get_webkit_movement_y ();
		public long get_x ();
		public long get_y ();
		public void init_mouse_event (string type, bool canBubble, bool cancelable, WebKit.DOMDOMWindow view, long detail, long screenX, long screenY, long clientX, long clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, ushort button, WebKit.DOMEventTarget relatedTarget);
		public bool alt_key { get; }
		public uint button { get; }
		public long client_x { get; }
		public long client_y { get; }
		public bool ctrl_key { get; }
		public WebKit.DOMNode from_element { get; }
		public bool meta_key { get; }
		public long offset_x { get; }
		public long offset_y { get; }
		public WebKit.DOMEventTarget related_target { get; }
		public long screen_x { get; }
		public long screen_y { get; }
		public bool shift_key { get; }
		public WebKit.DOMNode to_element { get; }
		public long webkit_movement_x { get; }
		public long webkit_movement_y { get; }
		public long x { get; }
		public long y { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_named_node_map_get_type ()")]
	public class DOMNamedNodeMap : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMNamedNodeMap ();
		public ulong get_length ();
		public unowned WebKit.DOMNode get_named_item (string name);
		public unowned WebKit.DOMNode get_named_item_ns (string namespaceURI, string localName);
		public unowned WebKit.DOMNode item (ulong index);
		public unowned WebKit.DOMNode remove_named_item (string name) throws GLib.Error;
		public unowned WebKit.DOMNode remove_named_item_ns (string namespaceURI, string localName) throws GLib.Error;
		public unowned WebKit.DOMNode set_named_item (WebKit.DOMNode node) throws GLib.Error;
		public unowned WebKit.DOMNode set_named_item_ns (WebKit.DOMNode node) throws GLib.Error;
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_navigator_get_type ()")]
	public class DOMNavigator : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMNavigator ();
		public string get_app_code_name ();
		public string get_app_name ();
		public string get_app_version ();
		public bool get_cookie_enabled ();
		public unowned WebKit.DOMGeolocation get_geolocation ();
		public string get_language ();
		public unowned WebKit.DOMDOMMimeTypeArray get_mime_types ();
		public bool get_on_line ();
		public string get_platform ();
		public unowned WebKit.DOMDOMPluginArray get_plugins ();
		public string get_product ();
		public string get_product_sub ();
		public void get_storage_updates ();
		public string get_user_agent ();
		public string get_vendor ();
		public string get_vendor_sub ();
		public unowned WebKit.DOMBatteryManager get_webkit_battery ();
		public unowned WebKit.DOMStorageQuota get_webkit_persistent_storage ();
		public unowned WebKit.DOMStorageQuota get_webkit_temporary_storage ();
		public string is_protocol_handler_registered (string scheme, string url) throws GLib.Error;
		public bool java_enabled ();
		public void register_protocol_handler (string scheme, string url, string title) throws GLib.Error;
		public void unregister_protocol_handler (string scheme, string url) throws GLib.Error;
		public unowned WebKit.DOMGamepadList webkit_get_gamepads ();
		public string app_code_name { owned get; }
		public string app_name { owned get; }
		public string app_version { owned get; }
		public bool cookie_enabled { get; }
		public WebKit.DOMGeolocation geolocation { get; }
		public string language { owned get; }
		public WebKit.DOMDOMMimeTypeArray mime_types { get; }
		public bool on_line { get; }
		public string platform { owned get; }
		public WebKit.DOMDOMPluginArray plugins { get; }
		public string product { owned get; }
		public string product_sub { owned get; }
		public string user_agent { owned get; }
		public string vendor { owned get; }
		public string vendor_sub { owned get; }
		public WebKit.DOMBatteryManager webkit_battery { get; }
		public WebKit.DOMStorageQuota webkit_persistent_storage { get; }
		public WebKit.DOMStorageQuota webkit_temporary_storage { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_node_get_type ()")]
	public class DOMNode : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMNode ();
		public unowned WebKit.DOMNode append_child (WebKit.DOMNode newChild) throws GLib.Error;
		public unowned WebKit.DOMNode clone_node (bool deep);
		public ushort compare_document_position (WebKit.DOMNode other);
		public bool contains (WebKit.DOMNode other);
		public unowned WebKit.DOMNamedNodeMap get_attributes ();
		public string get_base_uri ();
		public unowned WebKit.DOMNodeList get_child_nodes ();
		public unowned WebKit.DOMNode get_first_child ();
		public unowned WebKit.DOMNode get_last_child ();
		public string get_local_name ();
		public string get_namespace_uri ();
		public unowned WebKit.DOMNode get_next_sibling ();
		public string get_node_name ();
		public ushort get_node_type ();
		public string get_node_value ();
		public unowned WebKit.DOMDocument get_owner_document ();
		public unowned WebKit.DOMElement get_parent_element ();
		public unowned WebKit.DOMNode get_parent_node ();
		public string get_prefix ();
		public unowned WebKit.DOMNode get_previous_sibling ();
		public string get_text_content ();
		public bool has_attributes ();
		public bool has_child_nodes ();
		public unowned WebKit.DOMNode insert_before (WebKit.DOMNode newChild, WebKit.DOMNode? refChild) throws GLib.Error;
		public bool is_default_namespace (string namespaceURI);
		public bool is_equal_node (WebKit.DOMNode other);
		public bool is_same_node (WebKit.DOMNode other);
		public bool is_supported (string feature, string version);
		public string lookup_namespace_uri (string prefix);
		public string lookup_prefix (string namespaceURI);
		public void normalize ();
		public unowned WebKit.DOMNode remove_child (WebKit.DOMNode oldChild) throws GLib.Error;
		public unowned WebKit.DOMNode replace_child (WebKit.DOMNode newChild, WebKit.DOMNode oldChild) throws GLib.Error;
		public void set_node_value (string value) throws GLib.Error;
		public void set_prefix (string value) throws GLib.Error;
		public void set_text_content (string value) throws GLib.Error;
		public string base_uri { owned get; }
		public WebKit.DOMNodeList child_nodes { get; }
		public WebKit.DOMNode first_child { get; }
		public WebKit.DOMNode last_child { get; }
		public string local_name { owned get; }
		public string namespace_uri { owned get; }
		public WebKit.DOMNode next_sibling { get; }
		public string node_name { owned get; }
		public uint node_type { get; }
		public string node_value { owned get; set; }
		public WebKit.DOMDocument owner_document { get; }
		public WebKit.DOMElement parent_element { get; }
		public WebKit.DOMNode parent_node { get; }
		public string prefix { owned get; set; }
		public WebKit.DOMNode previous_sibling { get; }
		public string text_content { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_node_filter_get_type ()")]
	public class DOMNodeFilter : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMNodeFilter ();
		public short accept_node (WebKit.DOMNode n);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_node_iterator_get_type ()")]
	public class DOMNodeIterator : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMNodeIterator ();
		public void detach ();
		public bool get_expand_entity_references ();
		public unowned WebKit.DOMNodeFilter get_filter ();
		public bool get_pointer_before_reference_node ();
		public unowned WebKit.DOMNode get_reference_node ();
		public unowned WebKit.DOMNode get_root ();
		public ulong get_what_to_show ();
		public unowned WebKit.DOMNode next_node () throws GLib.Error;
		public unowned WebKit.DOMNode previous_node () throws GLib.Error;
		public bool expand_entity_references { get; }
		public WebKit.DOMNodeFilter filter { get; }
		public bool pointer_before_reference_node { get; }
		public WebKit.DOMNode reference_node { get; }
		public WebKit.DOMNode root { get; }
		public ulong what_to_show { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_node_list_get_type ()")]
	public class DOMNodeList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMNodeList ();
		public ulong get_length ();
		public unowned WebKit.DOMNode item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_object_get_type ()")]
	public class DOMObject : GLib.Object {
		public void* coreObject;
		[CCode (has_construct_function = false)]
		protected DOMObject ();
		public void* core_object { construct; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_performance_get_type ()")]
	public class DOMPerformance : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMPerformance ();
		public void* get_memory ();
		public unowned WebKit.DOMPerformanceNavigation get_navigation ();
		public unowned WebKit.DOMPerformanceTiming get_timing ();
		public double now ();
		public WebKit.DOMPerformanceNavigation navigation { get; }
		public WebKit.DOMPerformanceTiming timing { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_performance_entry_get_type ()")]
	public class DOMPerformanceEntry : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMPerformanceEntry ();
		public double get_duration ();
		public string get_entry_type ();
		public string get_name ();
		public double get_start_time ();
		public double duration { get; }
		public string entry_type { owned get; }
		public string name { owned get; }
		public double start_time { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_performance_entry_list_get_type ()")]
	public class DOMPerformanceEntryList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMPerformanceEntryList ();
		public ulong get_length ();
		public unowned WebKit.DOMPerformanceEntry item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_performance_navigation_get_type ()")]
	public class DOMPerformanceNavigation : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMPerformanceNavigation ();
		public ushort get_redirect_count ();
		public uint redirect_count { get; }
		[NoAccessorMethod]
		public uint type { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_performance_timing_get_type ()")]
	public class DOMPerformanceTiming : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMPerformanceTiming ();
		public uint64 get_connect_end ();
		public uint64 get_connect_start ();
		public uint64 get_dom_complete ();
		public uint64 get_dom_content_loaded_event_end ();
		public uint64 get_dom_content_loaded_event_start ();
		public uint64 get_dom_interactive ();
		public uint64 get_dom_loading ();
		public uint64 get_domain_lookup_end ();
		public uint64 get_domain_lookup_start ();
		public uint64 get_fetch_start ();
		public uint64 get_load_event_end ();
		public uint64 get_load_event_start ();
		public uint64 get_navigation_start ();
		public uint64 get_redirect_end ();
		public uint64 get_redirect_start ();
		public uint64 get_request_start ();
		public uint64 get_response_end ();
		public uint64 get_response_start ();
		public uint64 get_secure_connection_start ();
		public uint64 get_unload_event_end ();
		public uint64 get_unload_event_start ();
		public uint64 connect_end { get; }
		public uint64 connect_start { get; }
		public uint64 dom_complete { get; }
		public uint64 dom_content_loaded_event_end { get; }
		public uint64 dom_content_loaded_event_start { get; }
		public uint64 dom_interactive { get; }
		public uint64 dom_loading { get; }
		public uint64 domain_lookup_end { get; }
		public uint64 domain_lookup_start { get; }
		public uint64 fetch_start { get; }
		public uint64 load_event_end { get; }
		public uint64 load_event_start { get; }
		public uint64 navigation_start { get; }
		public uint64 redirect_end { get; }
		public uint64 redirect_start { get; }
		public uint64 request_start { get; }
		public uint64 response_end { get; }
		public uint64 response_start { get; }
		public uint64 secure_connection_start { get; }
		public uint64 unload_event_end { get; }
		public uint64 unload_event_start { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_processing_instruction_get_type ()")]
	public class DOMProcessingInstruction : WebKit.DOMCharacterData, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMProcessingInstruction ();
		public string get_data ();
		public unowned WebKit.DOMStyleSheet get_sheet ();
		public string get_target ();
		public void set_data (string value) throws GLib.Error;
		public WebKit.DOMStyleSheet sheet { get; }
		public string target { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_property_node_list_get_type ()")]
	public class DOMPropertyNodeList : WebKit.DOMNodeList {
		[CCode (has_construct_function = false)]
		protected DOMPropertyNodeList ();
		public static ulong get_length (void* self);
		public static unowned WebKit.DOMNode item (void* self, ulong index);
		[NoAccessorMethod]
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_range_get_type ()")]
	public class DOMRange : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMRange ();
		public unowned WebKit.DOMDocumentFragment clone_contents () throws GLib.Error;
		public unowned WebKit.DOMRange clone_range () throws GLib.Error;
		public void collapse (bool toStart) throws GLib.Error;
		public short compare_boundary_points (ushort how, WebKit.DOMRange sourceRange) throws GLib.Error;
		public short compare_node (WebKit.DOMNode refNode) throws GLib.Error;
		public short compare_point (WebKit.DOMNode refNode, long offset) throws GLib.Error;
		public unowned WebKit.DOMDocumentFragment create_contextual_fragment (string html) throws GLib.Error;
		public void delete_contents () throws GLib.Error;
		public void detach () throws GLib.Error;
		public void expand (string unit) throws GLib.Error;
		public unowned WebKit.DOMDocumentFragment extract_contents () throws GLib.Error;
		public bool get_collapsed () throws GLib.Error;
		public unowned WebKit.DOMNode get_common_ancestor_container () throws GLib.Error;
		public unowned WebKit.DOMNode get_end_container () throws GLib.Error;
		public long get_end_offset () throws GLib.Error;
		public unowned WebKit.DOMNode get_start_container () throws GLib.Error;
		public long get_start_offset () throws GLib.Error;
		public string get_text ();
		public void insert_node (WebKit.DOMNode newNode) throws GLib.Error;
		public bool intersects_node (WebKit.DOMNode refNode) throws GLib.Error;
		public bool is_point_in_range (WebKit.DOMNode refNode, long offset) throws GLib.Error;
		public void select_node (WebKit.DOMNode refNode) throws GLib.Error;
		public void select_node_contents (WebKit.DOMNode refNode) throws GLib.Error;
		public void set_end (WebKit.DOMNode refNode, long offset) throws GLib.Error;
		public void set_end_after (WebKit.DOMNode refNode) throws GLib.Error;
		public void set_end_before (WebKit.DOMNode refNode) throws GLib.Error;
		public void set_start (WebKit.DOMNode refNode, long offset) throws GLib.Error;
		public void set_start_after (WebKit.DOMNode refNode) throws GLib.Error;
		public void set_start_before (WebKit.DOMNode refNode) throws GLib.Error;
		public void surround_contents (WebKit.DOMNode newParent) throws GLib.Error;
		public string to_string () throws GLib.Error;
		public bool collapsed { get; }
		public WebKit.DOMNode common_ancestor_container { get; }
		public WebKit.DOMNode end_container { get; }
		public long end_offset { get; }
		public WebKit.DOMNode start_container { get; }
		public long start_offset { get; }
		public string text { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_screen_get_type ()")]
	public class DOMScreen : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMScreen ();
		public ulong get_avail_height ();
		public long get_avail_left ();
		public long get_avail_top ();
		public ulong get_avail_width ();
		public ulong get_color_depth ();
		public ulong get_height ();
		public ulong get_pixel_depth ();
		public ulong get_width ();
		public ulong avail_height { get; }
		public long avail_left { get; }
		public long avail_top { get; }
		public ulong avail_width { get; }
		public ulong color_depth { get; }
		public ulong height { get; }
		public ulong pixel_depth { get; }
		public ulong width { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_shadow_root_get_type ()")]
	public class DOMShadowRoot : WebKit.DOMDocumentFragment, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMShadowRoot ();
		public unowned WebKit.DOMElement element_from_point (long x, long y);
		public unowned WebKit.DOMElement get_active_element ();
		public bool get_apply_author_styles ();
		public unowned WebKit.DOMElement get_element_by_id (string elementId);
		public unowned WebKit.DOMNodeList get_elements_by_class_name (string className);
		public unowned WebKit.DOMNodeList get_elements_by_tag_name (string tagName);
		public unowned WebKit.DOMNodeList get_elements_by_tag_name_ns (string namespaceURI, string localName);
		public string get_inner_html ();
		public bool get_reset_style_inheritance ();
		public unowned WebKit.DOMDOMSelection get_selection ();
		public void set_apply_author_styles (bool value);
		public void set_inner_html (string value) throws GLib.Error;
		public void set_reset_style_inheritance (bool value);
		public WebKit.DOMElement active_element { get; }
		public bool apply_author_styles { get; set; }
		public string inner_html { owned get; set; }
		public bool reset_style_inheritance { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_storage_get_type ()")]
	public class DOMStorage : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMStorage ();
		public void clear () throws GLib.Error;
		public string get_item (string key) throws GLib.Error;
		public ulong get_length () throws GLib.Error;
		public string key (ulong index) throws GLib.Error;
		public void remove_item (string key) throws GLib.Error;
		public void set_item (string key, string data) throws GLib.Error;
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_storage_info_get_type ()")]
	public class DOMStorageInfo : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMStorageInfo ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_storage_quota_get_type ()")]
	public class DOMStorageQuota : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMStorageQuota ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_style_media_get_type ()")]
	public class DOMStyleMedia : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMStyleMedia ();
		public bool match_medium (string mediaquery);
		[NoAccessorMethod]
		public string type { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_style_sheet_get_type ()")]
	public class DOMStyleSheet : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMStyleSheet ();
		public bool get_disabled ();
		public string get_href ();
		public unowned WebKit.DOMMediaList get_media ();
		public unowned WebKit.DOMNode get_owner_node ();
		public unowned WebKit.DOMStyleSheet get_parent_style_sheet ();
		public string get_title ();
		public void set_disabled (bool value);
		public bool disabled { get; set; }
		public string href { owned get; }
		public WebKit.DOMMediaList media { get; }
		public WebKit.DOMNode owner_node { get; }
		public WebKit.DOMStyleSheet parent_style_sheet { get; }
		public string title { owned get; }
		[NoAccessorMethod]
		public string type { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_style_sheet_list_get_type ()")]
	public class DOMStyleSheetList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMStyleSheetList ();
		public ulong get_length ();
		public unowned WebKit.DOMStyleSheet item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_text_get_type ()")]
	public class DOMText : WebKit.DOMCharacterData, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMText ();
		public string get_whole_text ();
		public unowned WebKit.DOMText replace_whole_text (string content) throws GLib.Error;
		public unowned WebKit.DOMText split_text (ulong offset) throws GLib.Error;
		public string whole_text { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_text_track_get_type ()")]
	public class DOMTextTrack : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMTextTrack ();
		public void add_cue (WebKit.DOMTextTrackCue cue);
		public unowned WebKit.DOMTextTrackCueList get_active_cues ();
		public unowned WebKit.DOMTextTrackCueList get_cues ();
		public string get_id ();
		public string get_kind ();
		public string get_label ();
		public string get_language ();
		public string get_mode ();
		public void remove_cue (WebKit.DOMTextTrackCue cue) throws GLib.Error;
		public void set_mode (string value);
		public WebKit.DOMTextTrackCueList active_cues { get; }
		public WebKit.DOMTextTrackCueList cues { get; }
		public string id { owned get; }
		public string label { owned get; }
		public string mode { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_text_track_cue_get_type ()")]
	public class DOMTextTrackCue : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMTextTrackCue ();
		public string get_align ();
		public unowned WebKit.DOMDocumentFragment get_cue_as_html ();
		public double get_end_time ();
		public string get_id ();
		public long get_line ();
		public bool get_pause_on_exit ();
		public long get_position ();
		public long get_size ();
		public bool get_snap_to_lines ();
		public double get_start_time ();
		public string get_text ();
		public unowned WebKit.DOMTextTrack get_track ();
		public string get_vertical ();
		public void set_align (string value) throws GLib.Error;
		public void set_end_time (double value) throws GLib.Error;
		public void set_id (string value);
		public void set_line (long value) throws GLib.Error;
		public void set_pause_on_exit (bool value);
		public void set_position (long value) throws GLib.Error;
		public void set_size (long value) throws GLib.Error;
		public void set_snap_to_lines (bool value);
		public void set_start_time (double value) throws GLib.Error;
		public void set_text (string value);
		public void set_vertical (string value) throws GLib.Error;
		public string align { owned get; set; }
		public double end_time { get; set; }
		public string id { owned get; set; }
		public long line { get; set; }
		public bool pause_on_exit { get; set; }
		public long position { get; set; }
		public long size { get; set; }
		public bool snap_to_lines { get; set; }
		public double start_time { get; set; }
		public string text { owned get; set; }
		public WebKit.DOMTextTrack track { get; }
		public string vertical { owned get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_text_track_cue_list_get_type ()")]
	public class DOMTextTrackCueList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMTextTrackCueList ();
		public unowned WebKit.DOMTextTrackCue get_cue_by_id (string id);
		public ulong get_length ();
		public unowned WebKit.DOMTextTrackCue item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_text_track_list_get_type ()")]
	public class DOMTextTrackList : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMTextTrackList ();
		public ulong get_length ();
		public unowned WebKit.DOMTextTrack item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_time_ranges_get_type ()")]
	public class DOMTimeRanges : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMTimeRanges ();
		public double end (ulong index) throws GLib.Error;
		public ulong get_length ();
		public double start (ulong index) throws GLib.Error;
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_track_event_get_type ()")]
	public class DOMTrackEvent : WebKit.DOMEvent {
		[CCode (has_construct_function = false)]
		protected DOMTrackEvent ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_tree_walker_get_type ()")]
	public class DOMTreeWalker : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMTreeWalker ();
		public unowned WebKit.DOMNode first_child ();
		public unowned WebKit.DOMNode get_current_node ();
		public bool get_expand_entity_references ();
		public unowned WebKit.DOMNodeFilter get_filter ();
		public unowned WebKit.DOMNode get_root ();
		public ulong get_what_to_show ();
		public unowned WebKit.DOMNode last_child ();
		public unowned WebKit.DOMNode next_node ();
		public unowned WebKit.DOMNode next_sibling ();
		public unowned WebKit.DOMNode parent_node ();
		public unowned WebKit.DOMNode previous_node ();
		public unowned WebKit.DOMNode previous_sibling ();
		public void set_current_node (WebKit.DOMNode value) throws GLib.Error;
		public bool expand_entity_references { get; }
		public WebKit.DOMNodeFilter filter { get; }
		public WebKit.DOMNode root { get; }
		public ulong what_to_show { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_ui_event", type_id = "webkit_dom_ui_event_get_type ()")]
	public class DOMUIEvent : WebKit.DOMEvent {
		[CCode (has_construct_function = false)]
		protected DOMUIEvent ();
		public long get_char_code ();
		public long get_detail ();
		public long get_key_code ();
		public long get_layer_x ();
		public long get_layer_y ();
		public long get_page_x ();
		public long get_page_y ();
		public unowned WebKit.DOMDOMWindow get_view ();
		public long get_which ();
		public void init_ui_event (string type, bool canBubble, bool cancelable, WebKit.DOMDOMWindow view, long detail);
		public long char_code { get; }
		public long detail { get; }
		public long key_code { get; }
		public long layer_x { get; }
		public long layer_y { get; }
		public long page_x { get; }
		public long page_y { get; }
		public WebKit.DOMDOMWindow view { get; }
		public long which { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_validity_state_get_type ()")]
	public class DOMValidityState : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMValidityState ();
		public bool get_bad_input ();
		public bool get_custom_error ();
		public bool get_pattern_mismatch ();
		public bool get_range_overflow ();
		public bool get_range_underflow ();
		public bool get_step_mismatch ();
		public bool get_too_long ();
		public bool get_type_mismatch ();
		public bool get_valid ();
		public bool get_value_missing ();
		public bool bad_input { get; }
		public bool custom_error { get; }
		public bool pattern_mismatch { get; }
		public bool range_overflow { get; }
		public bool range_underflow { get; }
		public bool step_mismatch { get; }
		public bool too_long { get; }
		public bool type_mismatch { get; }
		public bool valid { get; }
		public bool value_missing { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_video_track_get_type ()")]
	public class DOMVideoTrack : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMVideoTrack ();
		public string get_id ();
		public string get_kind ();
		public string get_label ();
		public string get_language ();
		public bool get_selected ();
		public void set_selected (bool value);
		public string id { owned get; }
		public string label { owned get; }
		public bool selected { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_video_track_list_get_type ()")]
	public class DOMVideoTrackList : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMVideoTrackList ();
		public ulong get_length ();
		public unowned WebKit.DOMVideoTrack get_track_by_id (string id);
		public unowned WebKit.DOMVideoTrack item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_webkit_named_flow", type_id = "webkit_dom_webkit_named_flow_get_type ()")]
	public class DOMWebKitNamedFlow : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMWebKitNamedFlow ();
		public unowned WebKit.DOMNodeList get_content ();
		public unowned WebKit.DOMNodeList get_content_nodes ();
		public long get_first_empty_region_index ();
		public string get_name ();
		public bool get_overflow ();
		public bool get_overset ();
		public unowned WebKit.DOMNodeList get_regions ();
		public unowned WebKit.DOMNodeList get_regions_by_content (WebKit.DOMNode contentNode);
		public unowned WebKit.DOMNodeList get_regions_by_content_node (WebKit.DOMNode content_node);
		public long first_empty_region_index { get; }
		public string name { owned get; }
		public bool overset { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_webkit_point", type_id = "webkit_dom_webkit_point_get_type ()")]
	public class DOMWebKitPoint : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMWebKitPoint ();
		public float get_x ();
		public float get_y ();
		public void set_x (float value);
		public void set_y (float value);
		public float x { get; set; }
		public float y { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_wheel_event_get_type ()")]
	public class DOMWheelEvent : WebKit.DOMMouseEvent {
		[CCode (has_construct_function = false)]
		protected DOMWheelEvent ();
		public ulong get_delta_mode ();
		public double get_delta_x ();
		public double get_delta_y ();
		public double get_delta_z ();
		public bool get_webkit_direction_inverted_from_device ();
		public long get_wheel_delta ();
		public long get_wheel_delta_x ();
		public long get_wheel_delta_y ();
		public void init_wheel_event (long wheelDeltaX, long wheelDeltaY, WebKit.DOMDOMWindow view, long screenX, long screenY, long clientX, long clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey);
		public ulong delta_mode { get; }
		public double delta_x { get; }
		public double delta_y { get; }
		public double delta_z { get; }
		public bool webkit_direction_inverted_from_device { get; }
		public long wheel_delta { get; }
		public long wheel_delta_x { get; }
		public long wheel_delta_y { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_xpath_expression", type_id = "webkit_dom_xpath_expression_get_type ()")]
	public class DOMXPathExpression : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMXPathExpression ();
		public unowned WebKit.DOMXPathResult evaluate (WebKit.DOMNode contextNode, ushort type, WebKit.DOMXPathResult inResult) throws GLib.Error;
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_xpath_ns_resolver", type_id = "webkit_dom_xpath_ns_resolver_get_type ()")]
	public class DOMXPathNSResolver : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMXPathNSResolver ();
		public string lookup_namespace_uri (string prefix);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", lower_case_csuffix = "dom_xpath_result", type_id = "webkit_dom_xpath_result_get_type ()")]
	public class DOMXPathResult : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMXPathResult ();
		public bool get_boolean_value () throws GLib.Error;
		public bool get_invalid_iterator_state ();
		public double get_number_value () throws GLib.Error;
		public ushort get_result_type ();
		public unowned WebKit.DOMNode get_single_node_value () throws GLib.Error;
		public ulong get_snapshot_length () throws GLib.Error;
		public string get_string_value () throws GLib.Error;
		public unowned WebKit.DOMNode iterate_next () throws GLib.Error;
		public unowned WebKit.DOMNode snapshot_item (ulong index) throws GLib.Error;
		public bool boolean_value { get; }
		public bool invalid_iterator_state { get; }
		public double number_value { get; }
		public uint result_type { get; }
		public WebKit.DOMNode single_node_value { get; }
		public ulong snapshot_length { get; }
		public string string_value { owned get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_download_get_type ()")]
	public class Download : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Download ();
		public void cancel ();
		public unowned string get_destination ();
		public double get_elapsed_time ();
		public double get_estimated_progress ();
		public uint64 get_received_data_length ();
		public unowned WebKit.URIRequest get_request ();
		public unowned WebKit.URIResponse get_response ();
		public unowned WebKit.WebView get_web_view ();
		public void set_destination (string uri);
		public string destination { get; }
		public double estimated_progress { get; }
		public WebKit.URIResponse response { get; }
		public signal bool created_destination (string destination);
		public virtual signal bool decide_destination (string suggested_filename);
		public signal void failed (void* error);
		public signal void finished ();
		public signal void received_data (uint64 data_length);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_favicon_database_get_type ()")]
	public class FaviconDatabase : GLib.Object {
		[CCode (has_construct_function = false)]
		protected FaviconDatabase ();
		public void clear ();
		public async Cairo.Surface get_favicon (string page_uri, GLib.Cancellable? cancellable) throws GLib.Error;
		public string get_favicon_uri (string page_uri);
		public signal void favicon_changed (string page_uri, string favicon_uri);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_file_chooser_request_get_type ()")]
	public class FileChooserRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		protected FileChooserRequest ();
		public void cancel ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_mime_types ();
		public unowned Gtk.FileFilter get_mime_types_filter ();
		public bool get_select_multiple ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_selected_files ();
		public void select_files ([CCode (array_length = false, array_null_terminated = true)] string[] files);
		[NoAccessorMethod]
		public Gtk.FileFilter filter { owned get; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] mime_types { get; }
		public bool select_multiple { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] selected_files { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_find_controller_get_type ()")]
	public class FindController : GLib.Object {
		[CCode (has_construct_function = false)]
		protected FindController ();
		public void count_matches (string search_text, uint32 find_options, uint max_match_count);
		public uint get_max_match_count ();
		public uint32 get_options ();
		public unowned string get_search_text ();
		public unowned WebKit.WebView get_web_view ();
		public void search (string search_text, uint32 find_options, uint max_match_count);
		public void search_finish ();
		public void search_next ();
		public void search_previous ();
		public uint max_match_count { get; }
		public WebKit.FindOptions options { get; }
		[NoAccessorMethod]
		public string text { owned get; }
		public WebKit.WebView web_view { get; construct; }
		public signal void counted_matches (uint match_count);
		public signal void failed_to_find_text ();
		public signal void found_text (uint match_count);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_form_submission_request_get_type ()")]
	public class FormSubmissionRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		protected FormSubmissionRequest ();
		public unowned GLib.HashTable<void*,void*> get_text_fields ();
		public void submit ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_geolocation_permission_request_get_type ()")]
	public class GeolocationPermissionRequest : GLib.Object, WebKit.PermissionRequest {
		[CCode (has_construct_function = false)]
		protected GeolocationPermissionRequest ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_hit_test_result_get_type ()")]
	public class HitTestResult : GLib.Object {
		[CCode (has_construct_function = false)]
		protected HitTestResult ();
		public bool context_is_editable ();
		public bool context_is_image ();
		public bool context_is_link ();
		public bool context_is_media ();
		public bool context_is_scrollbar ();
		public uint get_context ();
		public unowned string get_image_uri ();
		public unowned string get_link_label ();
		public unowned string get_link_title ();
		public unowned string get_link_uri ();
		public unowned string get_media_uri ();
		public uint context { get; construct; }
		public string image_uri { get; construct; }
		public string link_label { get; construct; }
		public string link_title { get; construct; }
		public string link_uri { get; construct; }
		public string media_uri { get; construct; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", ref_function = "webkit_javascript_result_ref", type_id = "webkit_javascript_result_get_type ()", unref_function = "webkit_javascript_result_unref")]
	[Compact]
	public class JavascriptResult {
		public JS.GlobalContext? get_global_context ();
		public JS.Value? get_value ();
		public WebKit.JavascriptResult @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", ref_function = "webkit_mime_info_ref", type_id = "webkit_mime_info_get_type ()", unref_function = "webkit_mime_info_unref")]
	[Compact]
	public class MimeInfo {
		public unowned string get_description ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_extensions ();
		public unowned string get_mime_type ();
		public WebKit.MimeInfo @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_navigation_policy_decision_get_type ()")]
	public class NavigationPolicyDecision : WebKit.PolicyDecision {
		[CCode (has_construct_function = false)]
		protected NavigationPolicyDecision ();
		public unowned string get_frame_name ();
		public uint get_modifiers ();
		public uint get_mouse_button ();
		public WebKit.NavigationType get_navigation_type ();
		public unowned WebKit.URIRequest get_request ();
		public string frame_name { get; }
		public uint modifiers { get; }
		public uint mouse_button { get; }
		public WebKit.NavigationType navigation_type { get; }
		public WebKit.URIRequest request { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_plugin_get_type ()")]
	public class Plugin : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Plugin ();
		public unowned string get_description ();
		public unowned GLib.List<WebKit.MimeInfo> get_mime_info_list ();
		public unowned string get_name ();
		public unowned string get_path ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_policy_decision_get_type ()")]
	public abstract class PolicyDecision : GLib.Object {
		[CCode (has_construct_function = false)]
		protected PolicyDecision ();
		public void download ();
		public void ignore ();
		public void use ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_print_operation_get_type ()")]
	public class PrintOperation : GLib.Object {
		[CCode (has_construct_function = false)]
		public PrintOperation (WebKit.WebView web_view);
		public unowned Gtk.PageSetup get_page_setup ();
		public unowned Gtk.PrintSettings get_print_settings ();
		public void print ();
		public WebKit.PrintOperationResponse run_dialog (Gtk.Window? parent);
		public void set_page_setup (Gtk.PageSetup page_setup);
		public void set_print_settings (Gtk.PrintSettings print_settings);
		public Gtk.PageSetup page_setup { get; set; }
		public Gtk.PrintSettings print_settings { get; set; }
		[NoAccessorMethod]
		public WebKit.WebView web_view { owned get; construct; }
		public signal void failed (void* error);
		public signal void finished ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_response_policy_decision_get_type ()")]
	public class ResponsePolicyDecision : WebKit.PolicyDecision {
		[CCode (has_construct_function = false)]
		protected ResponsePolicyDecision ();
		public unowned WebKit.URIRequest get_request ();
		public unowned WebKit.URIResponse get_response ();
		public WebKit.URIRequest request { get; }
		public WebKit.URIResponse response { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "webkit_script_dialog_get_type ()")]
	[Compact]
	public class ScriptDialog {
		public void confirm_set_confirmed (bool confirmed);
		public WebKit.ScriptDialogType get_dialog_type ();
		public unowned string get_message ();
		public unowned string prompt_get_default_text ();
		public void prompt_set_text (string text);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_security_manager_get_type ()")]
	public class SecurityManager : GLib.Object {
		[CCode (has_construct_function = false)]
		protected SecurityManager ();
		public void register_uri_scheme_as_cors_enabled (string scheme);
		public void register_uri_scheme_as_display_isolated (string scheme);
		public void register_uri_scheme_as_empty_document (string scheme);
		public void register_uri_scheme_as_local (string scheme);
		public void register_uri_scheme_as_no_access (string scheme);
		public void register_uri_scheme_as_secure (string scheme);
		public bool uri_scheme_is_cors_enabled (string scheme);
		public bool uri_scheme_is_display_isolated (string scheme);
		public bool uri_scheme_is_empty_document (string scheme);
		public bool uri_scheme_is_local (string scheme);
		public bool uri_scheme_is_no_access (string scheme);
		public bool uri_scheme_is_secure (string scheme);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_settings_get_type ()")]
	public class Settings : GLib.Object {
		[CCode (has_construct_function = false)]
		public Settings ();
		public bool get_allow_modal_dialogs ();
		public bool get_auto_load_images ();
		public unowned string get_cursive_font_family ();
		public unowned string get_default_charset ();
		public unowned string get_default_font_family ();
		public uint32 get_default_font_size ();
		public uint32 get_default_monospace_font_size ();
		public bool get_draw_compositing_indicators ();
		public bool get_enable_accelerated_2d_canvas ();
		public bool get_enable_caret_browsing ();
		public bool get_enable_developer_extras ();
		public bool get_enable_dns_prefetching ();
		public bool get_enable_frame_flattening ();
		public bool get_enable_fullscreen ();
		public bool get_enable_html5_database ();
		public bool get_enable_html5_local_storage ();
		public bool get_enable_hyperlink_auditing ();
		public bool get_enable_java ();
		public bool get_enable_javascript ();
		public bool get_enable_media_stream ();
		public bool get_enable_offline_web_application_cache ();
		public bool get_enable_page_cache ();
		public bool get_enable_plugins ();
		public bool get_enable_private_browsing ();
		public bool get_enable_resizable_text_areas ();
		public bool get_enable_site_specific_quirks ();
		public bool get_enable_smooth_scrolling ();
		public bool get_enable_tabs_to_links ();
		public bool get_enable_webaudio ();
		public bool get_enable_webgl ();
		public bool get_enable_write_console_messages_to_stdout ();
		public bool get_enable_xss_auditor ();
		public unowned string get_fantasy_font_family ();
		public bool get_javascript_can_access_clipboard ();
		public bool get_javascript_can_open_windows_automatically ();
		public bool get_load_icons_ignoring_image_load_setting ();
		public bool get_media_playback_allows_inline ();
		public bool get_media_playback_requires_user_gesture ();
		public uint32 get_minimum_font_size ();
		public unowned string get_monospace_font_family ();
		public unowned string get_pictograph_font_family ();
		public bool get_print_backgrounds ();
		public unowned string get_sans_serif_font_family ();
		public unowned string get_serif_font_family ();
		public unowned string get_user_agent ();
		public bool get_zoom_text_only ();
		public void set_allow_modal_dialogs (bool allowed);
		public void set_auto_load_images (bool enabled);
		public void set_cursive_font_family (string cursive_font_family);
		public void set_default_charset (string default_charset);
		public void set_default_font_family (string default_font_family);
		public void set_default_font_size (uint32 font_size);
		public void set_default_monospace_font_size (uint32 font_size);
		public void set_draw_compositing_indicators (bool enabled);
		public void set_enable_accelerated_2d_canvas (bool enabled);
		public void set_enable_caret_browsing (bool enabled);
		public void set_enable_developer_extras (bool enabled);
		public void set_enable_dns_prefetching (bool enabled);
		public void set_enable_frame_flattening (bool enabled);
		public void set_enable_fullscreen (bool enabled);
		public void set_enable_html5_database (bool enabled);
		public void set_enable_html5_local_storage (bool enabled);
		public void set_enable_hyperlink_auditing (bool enabled);
		public void set_enable_java (bool enabled);
		public void set_enable_javascript (bool enabled);
		public void set_enable_media_stream (bool enabled);
		public void set_enable_offline_web_application_cache (bool enabled);
		public void set_enable_page_cache (bool enabled);
		public void set_enable_plugins (bool enabled);
		public void set_enable_private_browsing (bool enabled);
		public void set_enable_resizable_text_areas (bool enabled);
		public void set_enable_site_specific_quirks (bool enabled);
		public void set_enable_smooth_scrolling (bool enabled);
		public void set_enable_tabs_to_links (bool enabled);
		public void set_enable_webaudio (bool enabled);
		public void set_enable_webgl (bool enabled);
		public void set_enable_write_console_messages_to_stdout (bool enabled);
		public void set_enable_xss_auditor (bool enabled);
		public void set_fantasy_font_family (string fantasy_font_family);
		public void set_javascript_can_access_clipboard (bool enabled);
		public void set_javascript_can_open_windows_automatically (bool enabled);
		public void set_load_icons_ignoring_image_load_setting (bool enabled);
		public void set_media_playback_allows_inline (bool enabled);
		public void set_media_playback_requires_user_gesture (bool enabled);
		public void set_minimum_font_size (uint32 font_size);
		public void set_monospace_font_family (string monospace_font_family);
		public void set_pictograph_font_family (string pictograph_font_family);
		public void set_print_backgrounds (bool print_backgrounds);
		public void set_sans_serif_font_family (string sans_serif_font_family);
		public void set_serif_font_family (string serif_font_family);
		public void set_user_agent (string? user_agent);
		public void set_user_agent_with_application_details (string? application_name, string? application_version);
		public void set_zoom_text_only (bool zoom_text_only);
		public bool allow_modal_dialogs { get; set construct; }
		public bool auto_load_images { get; set construct; }
		public string cursive_font_family { get; set construct; }
		public string default_charset { get; set construct; }
		public string default_font_family { get; set construct; }
		public uint default_font_size { get; set construct; }
		public uint default_monospace_font_size { get; set construct; }
		public bool draw_compositing_indicators { get; set construct; }
		public bool enable_accelerated_2d_canvas { get; set construct; }
		public bool enable_caret_browsing { get; set construct; }
		public bool enable_developer_extras { get; set construct; }
		public bool enable_dns_prefetching { get; set construct; }
		public bool enable_frame_flattening { get; set construct; }
		public bool enable_fullscreen { get; set construct; }
		public bool enable_html5_database { get; set construct; }
		public bool enable_html5_local_storage { get; set construct; }
		public bool enable_hyperlink_auditing { get; set construct; }
		public bool enable_java { get; set construct; }
		public bool enable_javascript { get; set construct; }
		public bool enable_media_stream { get; set construct; }
		public bool enable_offline_web_application_cache { get; set construct; }
		public bool enable_page_cache { get; set construct; }
		public bool enable_plugins { get; set construct; }
		public bool enable_private_browsing { get; set construct; }
		public bool enable_resizable_text_areas { get; set construct; }
		public bool enable_site_specific_quirks { get; set construct; }
		public bool enable_smooth_scrolling { get; set construct; }
		public bool enable_tabs_to_links { get; set construct; }
		public bool enable_webaudio { get; set construct; }
		public bool enable_webgl { get; set construct; }
		public bool enable_write_console_messages_to_stdout { get; set construct; }
		public bool enable_xss_auditor { get; set construct; }
		public string fantasy_font_family { get; set construct; }
		public bool javascript_can_access_clipboard { get; set construct; }
		public bool javascript_can_open_windows_automatically { get; set construct; }
		public bool load_icons_ignoring_image_load_setting { get; set construct; }
		public bool media_playback_allows_inline { get; set construct; }
		public bool media_playback_requires_user_gesture { get; set construct; }
		public uint minimum_font_size { get; set construct; }
		public string monospace_font_family { get; set construct; }
		public string pictograph_font_family { get; set construct; }
		public bool print_backgrounds { get; set construct; }
		public string sans_serif_font_family { get; set construct; }
		public string serif_font_family { get; set construct; }
		public string user_agent { get; set construct; }
		public bool zoom_text_only { get; set construct; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_uri_request_get_type ()")]
	public class URIRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		public URIRequest (string uri);
		public unowned Soup.MessageHeaders get_http_headers ();
		public unowned string get_uri ();
		public void set_uri (string uri);
		public string uri { get; set construct; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_uri_response_get_type ()")]
	public class URIResponse : GLib.Object {
		[CCode (has_construct_function = false)]
		protected URIResponse ();
		public uint64 get_content_length ();
		public unowned string get_mime_type ();
		public uint get_status_code ();
		public unowned string get_suggested_filename ();
		public unowned string get_uri ();
		public uint64 content_length { get; }
		public string mime_type { get; }
		public uint status_code { get; }
		public string suggested_filename { get; }
		public string uri { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_uri_scheme_request_get_type ()")]
	public class URISchemeRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		protected URISchemeRequest ();
		public void finish (GLib.InputStream stream, int64 stream_length, string? mime_type);
		public void finish_error (GLib.Error error);
		public unowned string get_path ();
		public unowned string get_scheme ();
		public unowned string get_uri ();
		public unowned WebKit.WebView get_web_view ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_web_context_get_type ()")]
	public class WebContext : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebContext ();
		public void allow_tls_certificate_for_host (WebKit.CertificateInfo info, string host);
		public void clear_cache ();
		public WebKit.Download download_uri (string uri);
		public WebKit.CacheModel get_cache_model ();
		public unowned WebKit.CookieManager get_cookie_manager ();
		public static unowned WebKit.WebContext get_default ();
		public unowned WebKit.FaviconDatabase get_favicon_database ();
		public unowned string get_favicon_database_directory ();
		public async GLib.List<WebKit.Plugin> get_plugins (GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned WebKit.SecurityManager get_security_manager ();
		public bool get_spell_checking_enabled ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_spell_checking_languages ();
		public WebKit.TLSErrorsPolicy get_tls_errors_policy ();
		public void prefetch_dns (string hostname);
		public void register_uri_scheme (string scheme, owned WebKit.URISchemeRequestCallback callback);
		public void set_additional_plugins_directory (string directory);
		public void set_cache_model (WebKit.CacheModel cache_model);
		public void set_disk_cache_directory (string directory);
		public void set_favicon_database_directory (string? path);
		public void set_preferred_languages ([CCode (array_length = false, array_null_terminated = true)] string[]? languages);
		public void set_spell_checking_enabled (bool enabled);
		public void set_spell_checking_languages ([CCode (array_length = false, array_null_terminated = true)] string[] languages);
		public void set_tls_errors_policy (WebKit.TLSErrorsPolicy policy);
		public void set_web_extensions_directory (string directory);
		public signal void download_started (WebKit.Download download);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_web_inspector_get_type ()")]
	public class WebInspector : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebInspector ();
		public void close ();
		public uint get_attached_height ();
		public unowned string get_inspected_uri ();
		public unowned WebKit.WebViewBase get_web_view ();
		public bool is_attached ();
		public void show ();
		public uint attached_height { get; }
		public string inspected_uri { get; }
		[HasEmitter]
		public signal bool attach ();
		public signal bool bring_to_front ();
		public signal void closed ();
		[HasEmitter]
		public signal bool detach ();
		public signal bool open_window ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_web_resource_get_type ()")]
	public class WebResource : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebResource ();
		public async uint8 get_data (GLib.Cancellable? cancellable, out size_t length) throws GLib.Error;
		public unowned WebKit.URIResponse get_response ();
		public unowned string get_uri ();
		public WebKit.URIResponse response { get; }
		public string uri { get; }
		public signal void failed (void* error);
		public signal void finished ();
		public signal void received_data (uint64 data_length);
		public signal void sent_request (WebKit.URIRequest request, WebKit.URIResponse redirected_response);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_web_view_get_type ()")]
	public class WebView : WebKit.WebViewBase, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public WebView ();
		public async bool can_execute_editing_command (string command, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool can_go_back ();
		public bool can_go_forward ();
		public bool can_show_mime_type (string mime_type);
		public WebKit.Download download_uri (string uri);
		public void execute_editing_command (string command);
		public unowned WebKit.BackForwardList get_back_forward_list ();
		public unowned WebKit.WebContext get_context ();
		public unowned string get_custom_charset ();
		public double get_estimated_load_progress ();
		public unowned Cairo.Surface get_favicon ();
		public unowned WebKit.FindController get_find_controller ();
		public unowned WebKit.WebViewGroup get_group ();
		public unowned WebKit.WebInspector get_inspector ();
		public JS.GlobalContext? get_javascript_global_context ();
		public unowned WebKit.WebResource get_main_resource ();
		public uint64 get_page_id ();
		public unowned WebKit.Settings get_settings ();
		public async Cairo.Surface get_snapshot (WebKit.SnapshotRegion region, WebKit.SnapshotOptions options, GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned string get_title ();
		public bool get_tls_info (out unowned GLib.TlsCertificate certificate, out GLib.TlsCertificateFlags errors);
		public unowned string get_uri ();
		public WebKit.ViewMode get_view_mode ();
		public unowned WebKit.WindowProperties get_window_properties ();
		public double get_zoom_level ();
		public void go_back ();
		public void go_forward ();
		public void go_to_back_forward_list_item (WebKit.BackForwardListItem list_item);
		public void load_alternate_html (string content, string content_uri, string? base_uri);
		public void load_html (string content, string? base_uri);
		public void load_plain_text (string plain_text);
		public void load_request (WebKit.URIRequest request);
		public void load_uri (string uri);
		public void reload ();
		public void reload_bypass_cache ();
		public async WebKit.JavascriptResult run_javascript (string script, GLib.Cancellable? cancellable) throws GLib.Error;
		public async WebKit.JavascriptResult run_javascript_from_gresource (string resource, GLib.Cancellable? cancellable) throws GLib.Error;
		public async GLib.InputStream save (WebKit.SaveMode save_mode, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool save_to_file (GLib.File file, WebKit.SaveMode save_mode, GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_custom_charset (string? charset);
		public void set_settings (WebKit.Settings settings);
		public void set_view_mode (WebKit.ViewMode view_mode);
		public void set_zoom_level (double zoom_level);
		public void stop_loading ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public WebView.with_context (WebKit.WebContext context);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public WebView.with_group (WebKit.WebViewGroup group);
		public double estimated_load_progress { get; }
		public void* favicon { get; }
		public WebKit.WebViewGroup group { get; construct; }
		[NoAccessorMethod]
		public bool is_loading { get; }
		public string title { get; }
		public string uri { get; }
		public WebKit.ViewMode view_mode { get; set; }
		[NoAccessorMethod]
		public WebKit.WebContext web_context { owned get; construct; }
		public double zoom_level { get; set; }
		public virtual signal bool authenticate (WebKit.AuthenticationRequest request);
		public virtual signal void close ();
		public virtual signal bool context_menu (WebKit.ContextMenu context_menu, Gdk.Event event, WebKit.HitTestResult hit_test_result);
		public virtual signal void context_menu_dismissed ();
		public signal Gtk.Widget create ();
		public virtual signal bool decide_policy (WebKit.PolicyDecision decision, WebKit.PolicyDecisionType type);
		public virtual signal bool enter_fullscreen ();
		public virtual signal void insecure_content_detected (WebKit.InsecureContentEvent event);
		public virtual signal bool leave_fullscreen ();
		public virtual signal void load_changed (WebKit.LoadEvent load_event);
		public virtual signal bool load_failed (WebKit.LoadEvent load_event, string failing_uri, GLib.Error error);
		public virtual signal bool load_failed_with_tls_errors (WebKit.CertificateInfo info, string host);
		public virtual signal void mouse_target_changed (WebKit.HitTestResult hit_test_result, uint modifiers);
		public virtual signal bool permission_request (WebKit.PermissionRequest permission_request);
		public virtual signal bool print (WebKit.PrintOperation print_operation);
		public virtual signal void ready_to_show ();
		public virtual signal void resource_load_started (WebKit.WebResource resource, WebKit.URIRequest request);
		public virtual signal void run_as_modal ();
		public virtual signal bool run_file_chooser (WebKit.FileChooserRequest request);
		public virtual signal bool script_dialog (WebKit.ScriptDialog dialog);
		public virtual signal void submit_form (WebKit.FormSubmissionRequest request);
		public virtual signal bool web_process_crashed ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_web_view_base_get_type ()")]
	public class WebViewBase : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected WebViewBase ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_web_view_group_get_type ()")]
	public class WebViewGroup : GLib.Object {
		[CCode (has_construct_function = false)]
		public WebViewGroup (string? name);
		public void add_user_style_sheet (string source, string? base_uri, [CCode (array_length = false, array_null_terminated = true)] string[]? whitelist, [CCode (array_length = false, array_null_terminated = true)] string[]? blacklist, WebKit.InjectedContentFrames injected_frames);
		public unowned string get_name ();
		public unowned WebKit.Settings get_settings ();
		public void remove_all_user_style_sheets ();
		public void set_settings (WebKit.Settings settings);
		public WebKit.Settings settings { get; set; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_window_properties_get_type ()")]
	public class WindowProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WindowProperties ();
		public bool get_fullscreen ();
		public Gdk.Rectangle get_geometry ();
		public bool get_locationbar_visible ();
		public bool get_menubar_visible ();
		public bool get_resizable ();
		public bool get_scrollbars_visible ();
		public bool get_statusbar_visible ();
		public bool get_toolbar_visible ();
		public bool fullscreen { get; construct; }
		public Cairo.RectangleInt geometry { get; construct; }
		public bool locationbar_visible { get; construct; }
		public bool menubar_visible { get; construct; }
		public bool resizable { get; construct; }
		public bool scrollbars_visible { get; construct; }
		public bool statusbar_visible { get; construct; }
		public bool toolbar_visible { get; construct; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_dom_event_target_get_type ()")]
	public interface DOMEventTarget : GLib.Object {
		[NoWrapper]
		public abstract bool add_event_listener (string event_name, GLib.Closure handler, bool use_capture);
		public bool add_event_listener_with_closure (string event_name, GLib.Closure handler, bool use_capture);
		public abstract bool dispatch_event (WebKit.DOMEvent event) throws GLib.Error;
		public abstract bool remove_event_listener (string event_name, GLib.Closure handler, bool use_capture);
		public bool remove_event_listener_with_closure (string event_name, GLib.Closure handler, bool use_capture);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_permission_request_get_type ()")]
	public interface PermissionRequest : GLib.Object {
		public abstract void allow ();
		public abstract void deny ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_AUTHENTICATION_SCHEME_", type_id = "webkit_authentication_scheme_get_type ()")]
	public enum AuthenticationScheme {
		DEFAULT,
		HTTP_BASIC,
		HTTP_DIGEST,
		HTML_FORM,
		NTLM,
		NEGOTIATE,
		CLIENT_CERTIFICATE_REQUESTED,
		SERVER_TRUST_EVALUATION_REQUESTED,
		UNKNOWN
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_CACHE_MODEL_", type_id = "webkit_cache_model_get_type ()")]
	public enum CacheModel {
		DOCUMENT_VIEWER,
		WEB_BROWSER,
		DOCUMENT_BROWSER
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_CONTEXT_MENU_ACTION_", type_id = "webkit_context_menu_action_get_type ()")]
	public enum ContextMenuAction {
		NO_ACTION,
		OPEN_LINK,
		OPEN_LINK_IN_NEW_WINDOW,
		DOWNLOAD_LINK_TO_DISK,
		COPY_LINK_TO_CLIPBOARD,
		OPEN_IMAGE_IN_NEW_WINDOW,
		DOWNLOAD_IMAGE_TO_DISK,
		COPY_IMAGE_TO_CLIPBOARD,
		COPY_IMAGE_URL_TO_CLIPBOARD,
		OPEN_FRAME_IN_NEW_WINDOW,
		GO_BACK,
		GO_FORWARD,
		STOP,
		RELOAD,
		COPY,
		CUT,
		PASTE,
		DELETE,
		SELECT_ALL,
		INPUT_METHODS,
		UNICODE,
		SPELLING_GUESS,
		NO_GUESSES_FOUND,
		IGNORE_SPELLING,
		LEARN_SPELLING,
		IGNORE_GRAMMAR,
		FONT_MENU,
		BOLD,
		ITALIC,
		UNDERLINE,
		OUTLINE,
		INSPECT_ELEMENT,
		OPEN_VIDEO_IN_NEW_WINDOW,
		OPEN_AUDIO_IN_NEW_WINDOW,
		COPY_VIDEO_LINK_TO_CLIPBOARD,
		COPY_AUDIO_LINK_TO_CLIPBOARD,
		TOGGLE_MEDIA_CONTROLS,
		TOGGLE_MEDIA_LOOP,
		ENTER_VIDEO_FULLSCREEN,
		MEDIA_PLAY,
		MEDIA_PAUSE,
		MEDIA_MUTE,
		DOWNLOAD_VIDEO_TO_DISK,
		DOWNLOAD_AUDIO_TO_DISK,
		CUSTOM
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_COOKIE_POLICY_ACCEPT_", type_id = "webkit_cookie_accept_policy_get_type ()")]
	public enum CookieAcceptPolicy {
		ALWAYS,
		NEVER,
		NO_THIRD_PARTY
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_COOKIE_PERSISTENT_STORAGE_", type_id = "webkit_cookie_persistent_storage_get_type ()")]
	public enum CookiePersistentStorage {
		TEXT,
		SQLITE
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_CREDENTIAL_PERSISTENCE_", type_id = "webkit_credential_persistence_get_type ()")]
	public enum CredentialPersistence {
		NONE,
		FOR_SESSION,
		PERMANENT
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_FIND_OPTIONS_", type_id = "webkit_find_options_get_type ()")]
	[Flags]
	public enum FindOptions {
		NONE,
		CASE_INSENSITIVE,
		AT_WORD_STARTS,
		TREAT_MEDIAL_CAPITAL_AS_WORD_START,
		BACKWARDS,
		WRAP_AROUND
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_HIT_TEST_RESULT_CONTEXT_", type_id = "webkit_hit_test_result_context_get_type ()")]
	[Flags]
	public enum HitTestResultContext {
		DOCUMENT,
		LINK,
		IMAGE,
		MEDIA,
		EDITABLE,
		SCROLLBAR
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_INJECTED_CONTENT_FRAMES_", type_id = "webkit_injected_content_frames_get_type ()")]
	public enum InjectedContentFrames {
		ALL,
		TOP_ONLY
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_INSECURE_CONTENT_", type_id = "webkit_insecure_content_event_get_type ()")]
	public enum InsecureContentEvent {
		RUN,
		DISPLAYED
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_LOAD_", type_id = "webkit_load_event_get_type ()")]
	public enum LoadEvent {
		STARTED,
		REDIRECTED,
		COMMITTED,
		FINISHED
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_NAVIGATION_TYPE_", type_id = "webkit_navigation_type_get_type ()")]
	public enum NavigationType {
		LINK_CLICKED,
		FORM_SUBMITTED,
		BACK_FORWARD,
		RELOAD,
		FORM_RESUBMITTED,
		OTHER
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_POLICY_DECISION_TYPE_", type_id = "webkit_policy_decision_type_get_type ()")]
	public enum PolicyDecisionType {
		NAVIGATION_ACTION,
		NEW_WINDOW_ACTION,
		RESPONSE
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_PRINT_OPERATION_RESPONSE_", type_id = "webkit_print_operation_response_get_type ()")]
	public enum PrintOperationResponse {
		PRINT,
		CANCEL
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_SAVE_MODE_", type_id = "webkit_save_mode_get_type ()")]
	public enum SaveMode {
		MHTML
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_SCRIPT_DIALOG_", type_id = "webkit_script_dialog_type_get_type ()")]
	public enum ScriptDialogType {
		ALERT,
		CONFIRM,
		PROMPT
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_SNAPSHOT_OPTIONS_", type_id = "webkit_snapshot_options_get_type ()")]
	[Flags]
	public enum SnapshotOptions {
		NONE,
		INCLUDE_SELECTION_HIGHLIGHTING
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_SNAPSHOT_REGION_", type_id = "webkit_snapshot_region_get_type ()")]
	public enum SnapshotRegion {
		VISIBLE,
		FULL_DOCUMENT
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_TLS_ERRORS_POLICY_", type_id = "webkit_tls_errors_policy_get_type ()")]
	public enum TLSErrorsPolicy {
		IGNORE,
		FAIL
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_VIEW_MODE_", type_id = "webkit_view_mode_get_type ()")]
	public enum ViewMode {
		WEB,
		SOURCE
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_DOWNLOAD_ERROR_")]
	public errordomain DownloadError {
		NETWORK,
		CANCELLED_BY_USER,
		DESTINATION;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_FAVICON_DATABASE_ERROR_")]
	public errordomain FaviconDatabaseError {
		NOT_INITIALIZED,
		FAVICON_NOT_FOUND,
		FAVICON_UNKNOWN;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_JAVASCRIPT_ERROR_SCRIPT_")]
	public errordomain JavascriptError {
		FAILED;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_NETWORK_ERROR_")]
	public errordomain NetworkError {
		FAILED,
		TRANSPORT,
		UNKNOWN_PROTOCOL,
		CANCELLED,
		FILE_DOES_NOT_EXIST;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_PLUGIN_ERROR_")]
	public errordomain PluginError {
		FAILED,
		CANNOT_FIND_PLUGIN,
		CANNOT_LOAD_PLUGIN,
		JAVA_UNAVAILABLE,
		CONNECTION_CANCELLED,
		WILL_HANDLE_LOAD;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_POLICY_ERROR_")]
	public errordomain PolicyError {
		FAILED,
		CANNOT_SHOW_MIME_TYPE,
		CANNOT_SHOW_URI,
		FRAME_LOAD_INTERRUPTED_BY_POLICY_CHANGE,
		CANNOT_USE_RESTRICTED_PORT;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_PRINT_ERROR_")]
	public errordomain PrintError {
		GENERAL,
		PRINTER_NOT_FOUND,
		INVALID_PAGE_RANGE;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_SNAPSHOT_ERROR_FAILED_TO_")]
	public errordomain SnapshotError {
		CREATE;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", instance_pos = 1.9)]
	public delegate void URISchemeRequestCallback (WebKit.URISchemeRequest request);
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_EDITING_COMMAND_COPY")]
	public const string EDITING_COMMAND_COPY;
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_EDITING_COMMAND_CUT")]
	public const string EDITING_COMMAND_CUT;
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_EDITING_COMMAND_PASTE")]
	public const string EDITING_COMMAND_PASTE;
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_EDITING_COMMAND_REDO")]
	public const string EDITING_COMMAND_REDO;
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_EDITING_COMMAND_SELECT_ALL")]
	public const string EDITING_COMMAND_SELECT_ALL;
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_EDITING_COMMAND_UNDO")]
	public const string EDITING_COMMAND_UNDO;
}