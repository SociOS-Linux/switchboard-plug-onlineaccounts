/* gsignond.vapi generated by vapigen-0.26, do not modify. */

[CCode (cprefix = "GSignond", gir_namespace = "gSignond", gir_version = "1.0", lower_case_cprefix = "gsignond_")]
namespace GSignond {
	[CCode (cheader_filename = "gsignond/gsignond-access-control-manager.h", type_id = "gsignond_access_control_manager_get_type ()")]
	public class AccessControlManager : GLib.Object {
		[CCode (has_construct_function = false)]
		protected AccessControlManager ();
		public virtual bool acl_is_valid (GSignond.SecurityContext peer_ctx, GSignond.SecurityContextList identity_acl);
		public virtual bool peer_is_allowed_to_use_identity (GSignond.SecurityContext peer_ctx, GSignond.SecurityContext owner_ctx, GSignond.SecurityContextList identity_acl);
		public virtual bool peer_is_owner_of_identity (GSignond.SecurityContext peer_ctx, GSignond.SecurityContext owner_ctx);
		public virtual void security_context_of_peer (GSignond.SecurityContext peer_ctx, int peer_fd, string peer_service, string peer_app_ctx);
		[NoAccessorMethod]
		public GSignond.Config config { owned get; construct; }
	}
	[CCode (cheader_filename = "gsignond/gsignond-config.h", type_id = "gsignond_config_get_type ()")]
	public class Config : GLib.Object {
		[CCode (has_construct_function = false)]
		public Config ();
		public int get_integer (string key);
		public unowned string get_string (string key);
		public void set_integer (string key, int value);
		public void set_string (string key, string value);
	}
	[CCode (cheader_filename = "gsignond/gsignond-credentials.h", type_id = "gsignond_credentials_get_type ()")]
	public class Credentials : GLib.Object {
		[CCode (has_construct_function = false)]
		public Credentials ();
		public bool equal (GSignond.Credentials two);
		public uint32 get_id ();
		public unowned string get_password ();
		public unowned string get_username ();
		public bool set_data (uint32 id, string username, string password);
		public bool set_id (uint32 id);
		public bool set_password (string password);
		public bool set_username (string username);
	}
	[CCode (cheader_filename = "gsignond/gsignond-dictionary.h")]
	public class Dictionary : GLib.HashTable<string,GLib.Variant> {
		[CCode (has_construct_function = false)]
		public Dictionary ();
		public bool contains (string key);
		public unowned GLib.Variant @get (string key);
		public bool get_boolean (string key, out bool value);
		public bool get_int32 (string key, out int value);
		public bool get_int64 (string key, out int64 value);
		public unowned string get_string (string key);
		public bool get_uint32 (string key, out uint value);
		public bool get_uint64 (string key, out uint64 value);
		public Dictionary.new_from_variant (GLib.Variant variant);
		public bool remove (string key);
		public bool @set (string key, GLib.Variant value);
		public bool set_boolean (string key, bool value);
		public bool set_int32 (string key, int value);
		public bool set_int64 (string key, int64 value);
		public bool set_string (string key, string value);
		public bool set_uint32 (string key, uint32 value);
		public bool set_uint64 (string key, uint64 value);
		public GLib.Variant to_variant ();
		public unowned GLib.VariantBuilder to_variant_builder ();
	}
	[CCode (cheader_filename = "gsignond/gsignond-extension-interface.h", type_id = "gsignond_extension_get_type ()")]
	public class Extension : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Extension ();
		public virtual unowned GSignond.AccessControlManager get_access_control_manager (GSignond.Config config);
		[NoWrapper]
		public virtual unowned string get_extension_name ();
		[NoWrapper]
		public virtual uint32 get_extension_version ();
		public unowned string get_name ();
		public virtual unowned GSignond.SecretStorage get_secret_storage (GSignond.Config config);
		public virtual unowned GSignond.StorageManager get_storage_manager (GSignond.Config config);
		public uint32 get_version ();
	}
	[CCode (cheader_filename = "gsignond/gsignond-secret-storage.h", type_id = "gsignond_secret_storage_get_type ()")]
	public class SecretStorage : GLib.Object {
		[CCode (has_construct_function = false)]
		protected SecretStorage ();
		public virtual bool check_credentials (GSignond.Credentials creds);
		public virtual bool clear_db ();
		public virtual bool close_db ();
		public virtual unowned GLib.Error get_last_error ();
		public virtual bool is_open_db ();
		public virtual GSignond.Credentials load_credentials (uint32 id);
		public virtual GSignond.Dictionary load_data (uint32 id, uint32 method);
		public virtual bool open_db ();
		public virtual bool remove_credentials (uint32 id);
		public virtual bool remove_data (uint32 id, uint32 method);
		public virtual bool update_credentials (GSignond.Credentials creds);
		public virtual bool update_data (uint32 id, uint32 method, GSignond.Dictionary data);
		[NoAccessorMethod]
		public GSignond.Config config { owned get; construct; }
	}
	[CCode (cheader_filename = "gsignond/gsignond-security-context.h", free_function = "gsignond_security_context_list_free")]
	public class SecurityContextList : GLib.List<GSignond.SecurityContext> {
		public GSignond.SecurityContextList copy ();
		public SecurityContextList.from_variant (GLib.Variant variant);
		public GLib.Variant to_variant ();
	}
	[CCode (cheader_filename = "gsignond/gsignond-session-data.h")]
	public class SessionData : GSignond.Dictionary {
		[CCode (has_construct_function = false)]
		protected SessionData ();
		public static unowned string get_caption (GSignond.SessionData data);
		public static unowned string get_network_proxy (GSignond.SessionData data);
		public static bool get_network_timeout (GSignond.SessionData data, out uint32 network_timeout);
		public static unowned string get_realm (GSignond.SessionData data);
		public static bool get_renew_token (GSignond.SessionData data, out bool renew_token);
		public static unowned string get_secret (GSignond.SessionData data);
		public static bool get_ui_policy (GSignond.SessionData data, out GSignond.UiPolicy ui_policy);
		public static unowned string get_username (GSignond.SessionData data);
		public static bool get_window_id (GSignond.SessionData data, out uint32 window_id);
		public static void set_allowed_realms (GSignond.SessionData data, GLib.Sequence realms);
		public static void set_caption (GSignond.SessionData data, string caption);
		public static void set_network_proxy (GSignond.SessionData data, string network_proxy);
		public static void set_network_timeout (GSignond.SessionData data, uint32 network_timeout);
		public static void set_realm (GSignond.SessionData data, string realm);
		public static void set_renew_token (GSignond.SessionData data, bool renew_token);
		public static void set_secret (GSignond.SessionData data, string secret);
		public static void set_ui_policy (GSignond.SessionData data, GSignond.UiPolicy ui_policy);
		public static void set_username (GSignond.SessionData data, string username);
		public static void set_window_id (GSignond.SessionData data, uint32 window_id);
	}
	[CCode (cheader_filename = "gsignond/gsignond-signonui-data.h")]
	public class SignonuiData : GSignond.Dictionary {
		[CCode (has_construct_function = false)]
		protected SignonuiData ();
		public static unowned string get_captcha_response (GSignond.SignonuiData data);
		public static unowned string get_captcha_url (GSignond.SignonuiData data);
		public static unowned string get_caption (GSignond.SignonuiData data);
		public static bool get_confirm (GSignond.SignonuiData data, out bool confirm);
		public static unowned string get_final_url (GSignond.SignonuiData data);
		public static unowned string get_forgot_password (GSignond.SignonuiData data);
		public static unowned string get_forgot_password_url (GSignond.SignonuiData data);
		public static unowned string get_message (GSignond.SignonuiData data);
		public static unowned string get_open_url (GSignond.SignonuiData data);
		public static unowned string get_password (GSignond.SignonuiData data);
		public static bool get_query_error (GSignond.SignonuiData data, GSignond.SignonuiError error);
		public static bool get_query_password (GSignond.SignonuiData data, out bool query_password);
		public static bool get_query_username (GSignond.SignonuiData data, out bool query_username);
		public static bool get_remember_password (GSignond.SignonuiData data, out bool remember_password);
		public static unowned string get_request_id (GSignond.SignonuiData data);
		public static unowned string get_test_reply (GSignond.SignonuiData data);
		public static unowned string get_title (GSignond.SignonuiData data);
		public static unowned string get_url_response (GSignond.SignonuiData data);
		public static unowned string get_username (GSignond.SignonuiData data);
		public static void set_captcha_response (GSignond.SignonuiData data, string response);
		public static void set_captcha_url (GSignond.SignonuiData data, string url);
		public static void set_caption (GSignond.SignonuiData data, string caption);
		public static void set_confirm (GSignond.SignonuiData data, bool confirm);
		public static void set_final_url (GSignond.SignonuiData data, string url);
		public static void set_forgot_password (GSignond.SignonuiData data, string forgot);
		public static void set_forgot_password_url (GSignond.SignonuiData data, string url);
		public static void set_message (GSignond.SignonuiData data, string message);
		public static void set_open_url (GSignond.SignonuiData data, string url);
		public static void set_password (GSignond.SignonuiData data, string password);
		public static void set_query_error (GSignond.SignonuiData data, GSignond.SignonuiError error);
		public static void set_query_password (GSignond.SignonuiData data, bool query);
		public static void set_query_username (GSignond.SignonuiData data, bool query);
		public static void set_remember_password (GSignond.SignonuiData data, bool remember);
		public static void set_request_id (GSignond.SignonuiData data, string id);
		public static void set_test_reply (GSignond.SignonuiData data, string reply);
		public static void set_title (GSignond.SignonuiData data, string title);
		public static void set_url_response (GSignond.SignonuiData data, string response);
		public static void set_username (GSignond.SignonuiData data, string username);
	}
	[CCode (cheader_filename = "gsignond/gsignond-storage-manager.h", type_id = "gsignond_storage_manager_get_type ()")]
	public class StorageManager : GLib.Object {
		public string location;
		[CCode (has_construct_function = false)]
		protected StorageManager ();
		public virtual bool delete_storage ();
		public virtual bool filesystem_is_mounted ();
		public virtual bool initialize_storage ();
		public virtual unowned string mount_filesystem ();
		public virtual bool storage_is_initialized ();
		public virtual bool unmount_filesystem ();
		[NoAccessorMethod]
		public GSignond.Config config { owned get; construct; }
	}
	[CCode (cheader_filename = "gsignond/gsignond-plugin-interface.h", type_cname = "GSignondPluginInterface", type_id = "gsignond_plugin_get_type ()")]
	public interface Plugin : GLib.Object {
		public abstract void cancel ();
		public abstract void refresh (GSignond.SignonuiData session_data);
		public abstract void request (GSignond.SessionData session_data);
		public abstract void request_initial (GSignond.SessionData session_data, GSignond.Dictionary identity_method_cache, string mechanism);
		public void status_changed (GSignond.PluginState state, string message);
		public abstract void user_action_finished (GSignond.SignonuiData session_data);
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public abstract string[] mechanisms { owned get; }
		[NoAccessorMethod]
		public abstract string type { owned get; }
		[HasEmitter]
		public signal void error (GLib.Error error);
		[HasEmitter]
		public signal void refreshed (GSignond.SignonuiData ui_data);
		[HasEmitter]
		public signal void response (GSignond.SessionData session_data);
		[HasEmitter]
		public signal void response_final (GSignond.SessionData session_data);
		[HasEmitter]
		public signal void store (GSignond.Dictionary identity_method_cache);
		[HasEmitter]
		public signal void user_action_required (GSignond.SignonuiData ui_data);
	}
	[CCode (cheader_filename = "gsignond/gsignond-security-context.h", has_type_id = false)]
	public struct SecurityContext {
		public weak string sys_ctx;
		public weak string app_ctx;
		public bool check (GSignond.SecurityContext test);
		public int compare (GSignond.SecurityContext ctx2);
		public void free ();
		public unowned string get_application_context ();
		public unowned string get_system_context ();
		public bool match (GSignond.SecurityContext ctx2);
		public void set_application_context (string application_context);
		public void set_system_context (string system_context);
		public GLib.Variant to_variant ();
	}
	[CCode (cheader_filename = "gsignond/gsignond-plugin-interface.h", cprefix = "GSIGNOND_PLUGIN_STATE_", has_type_id = false)]
	public enum PluginState {
		NONE,
		RESOLVING,
		CONNECTING,
		SENDING_DATA,
		WAITING,
		USER_PENDING,
		REFRESHING,
		PROCESS_PENDING,
		STARTED,
		CANCELING,
		DONE,
		HOLDING
	}
	[CCode (cheader_filename = "gsignond/gsignond-signonui-data.h", cprefix = "SIGNONUI_ERROR_", has_type_id = false)]
	public enum SignonuiError {
		NONE,
		GENERAL,
		NO_SIGNONUI,
		BAD_PARAMETERS,
		CANCELED,
		NOT_AVAILABLE,
		BAD_URL,
		BAD_CAPTCHA,
		BAD_CAPTCHA_URL,
		REFRESH_FAILED,
		FORBIDDEN,
		FORGOT_PASSWORD
	}
	[CCode (cheader_filename = "gsignond/gsignond-signonui-data.h", cprefix = "GSIGNOND_UI_POLICY_", has_type_id = false)]
	public enum UiPolicy {
		DEFAULT,
		REQUEST_PASSWORD,
		NO_USER_INTERACTION,
		VALIDATION
	}
	[CCode (cheader_filename = "gsignond/gsignond-error.h", cprefix = "GSIGNOND_ERROR_")]
	public errordomain Error {
		NONE,
		UNKNOWN,
		INTERNAL_SERVER,
		INTERNAL_COMMUNICATION,
		PERMISSION_DENIED,
		ENCRYPTION_FAILURE,
		AUTH_SERVICE_ERR,
		METHOD_NOT_KNOWN,
		SERVICE_NOT_AVAILABLE,
		INVALID_QUERY,
		IDENTITY_ERR,
		METHOD_NOT_AVAILABLE,
		IDENTITY_NOT_FOUND,
		STORE_FAILED,
		REMOVE_FAILED,
		SIGN_OUT_FAILED,
		IDENTITY_OPERATION_CANCELED,
		CREDENTIALS_NOT_AVAILABLE,
		REFERENCE_NOT_FOUND,
		AUTH_SESSION_ERR,
		MECHANISM_NOT_AVAILABLE,
		MISSING_DATA,
		INVALID_CREDENTIALS,
		NOT_AUTHORIZED,
		WRONG_STATE,
		OPERATION_NOT_SUPPORTED,
		NO_CONNECTION,
		NETWORK,
		SSL,
		RUNTIME,
		SESSION_CANCELED,
		TIMED_OUT,
		USER_INTERACTION,
		OPERATION_FAILED,
		ENCRYPTION_FAILED,
		TOS_NOT_ACCEPTED,
		FORGOT_PASSWORD,
		METHOD_OR_MECHANISM_NOT_ALLOWED,
		INCORRECT_DATE,
		USER_ERR;
		public static GLib.Error new_from_variant (GLib.Variant @var);
		public static GLib.Quark quark ();
		public static GLib.Variant to_variant (GLib.Error error);
	}
	[CCode (cheader_filename = "gsignond/gsignond-config.h", cname = "GSIGNOND_CONFIG_DBUS_TIMEOUTS")]
	public const string CONFIG_DBUS_TIMEOUTS;
	[CCode (cheader_filename = "gsignond/gsignond-config.h", cname = "GSIGNOND_CONFIG_GENERAL")]
	public const string CONFIG_GENERAL;
	[CCode (cheader_filename = "gsignond/gsignond-utils.h")]
	public static string generate_nonce ();
	[CCode (cheader_filename = "gsignond/gsignond-utils.h")]
	public static bool is_host_in_domain (string host, string domain);
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "gsignond/gsignond-utils.h")]
	public static string[] sequence_to_array (GLib.Sequence seq);
	[CCode (cheader_filename = "gsignond/gsignond-utils.h")]
	public static GLib.Variant sequence_to_variant (GLib.Sequence seq);
	[CCode (cheader_filename = "gsignond/gsignond-utils.h")]
	public static bool wipe_directory (string dirname);
	[CCode (cheader_filename = "gsignond/gsignond-utils.h")]
	public static bool wipe_file (string filename);
}
